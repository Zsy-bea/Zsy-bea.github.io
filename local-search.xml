<?xml version="1.0" encoding="utf-8"?>
<search>
  
  
  
  <entry>
    <title>学习一下three.js（材质Material）</title>
    <link href="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/"/>
    <url>/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>材质简单理解就是设置几何体各个面的颜色。但它不是单纯的颜色，它能模拟在不同光照下颜色的表现。比如太阳光照射光滑的物体，表面会出现白色的反光，都能模拟。材质和渲染器无关，在开发中定义一份材质就可以重复使用。<br>定义材质的常用的方式有两种：<br>1  在实例化时传入要配置的参数</p><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<br>    <span class="hljs-attr">color</span>: <span class="hljs-number">0xFF0000</span>, <span class="hljs-comment">// 也可以使用CSS的颜色字符串</span><br>&#125;);<br></code></pre></td></tr></table></figure><p>2  通过材质的方法设置属性</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> material = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>();<br>material.<span class="hljs-property">color</span>.<span class="hljs-title function_">setHSL</span>(<span class="hljs-number">0</span>, <span class="hljs-number">1</span>, <span class="hljs-number">0.5</span>); <br>material.<span class="hljs-property">color</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">0x00FFFF</span>); <span class="hljs-comment">// 同 CSS的 #RRGGBB 风格</span><br></code></pre></td></tr></table></figure><h2 id="MeshBasicMaterial基础材质"><a href="#MeshBasicMaterial基础材质" class="headerlink" title="MeshBasicMaterial基础材质"></a>MeshBasicMaterial基础材质</h2><p>◉ 以简单着色的方式实现<br>◉ 不受灯光的影响</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基础材质</span><br><span class="hljs-keyword">const</span> sphereGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">SphereGeometry</span>(<span class="hljs-number">4</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">const</span> sphereMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0xf37e7d</span>&#125;);<br><span class="hljs-keyword">const</span> sphere = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(sphereGeometry, sphereMaterial);<br><span class="hljs-comment">// 位置</span><br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">4</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 阴影</span><br>sphere.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br>scene.<span class="hljs-title function_">add</span>(sphere);<br><br><span class="hljs-comment">// 基础材质</span><br><span class="hljs-keyword">const</span> sphereGeometry1 = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">SphereGeometry</span>(<span class="hljs-number">4</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><span class="hljs-comment">// wireframe 基础材质的属性，设置true，只渲染线框</span><br><span class="hljs-keyword">const</span> sphereMaterial1 = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0xf37e7d</span>, <span class="hljs-attr">wireframe</span>: <span class="hljs-literal">true</span>&#125;);<br><span class="hljs-keyword">const</span> sphere1 = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(sphereGeometry1, sphereMaterial1)<br>sphere1.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">10</span>;<br>sphere1.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">4</span>;<br>sphere1.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">0</span>;<br>sphere1.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br>scene.<span class="hljs-title function_">add</span>(sphere1);<br></code></pre></td></tr></table></figure><p>运行效果<br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo1.png"></p><h2 id="MeshLambertMaterial-Lambert网格材质"><a href="#MeshLambertMaterial-Lambert网格材质" class="headerlink" title="MeshLambertMaterial Lambert网格材质"></a>MeshLambertMaterial Lambert网格材质</h2><p>◉ 表面光滑的材质。<br>◉ 受灯光的影响，不过只在顶点计算光照。<br>◉ 能很好的模拟一些表面（例如未经处理的木材或石材）。因为只在顶点计算光照，不能模拟具有镜面高光的表面（如地板砖这些）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基础材质</span><br><span class="hljs-keyword">const</span> sphereGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">SphereGeometry</span>(<span class="hljs-number">4</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">const</span> sphereMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshLambertMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0xf37e7d</span>&#125;);<br><span class="hljs-keyword">const</span> sphere = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(sphereGeometry, sphereMaterial);<br><span class="hljs-comment">// 位置</span><br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">4</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 阴影</span><br>sphere.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br>scene.<span class="hljs-title function_">add</span>(sphere);<br></code></pre></td></tr></table></figure><p>这里灯光用的方向光黑色，不设置灯光几何体就会展示为全黑。几何体最后展示的颜色是，灯光颜色乘以材质的颜色来展示的。<br>运行效果<br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo2.png"></p><h2 id="MeshPhongMaterial-Phong网格材质"><a href="#MeshPhongMaterial-Phong网格材质" class="headerlink" title="MeshPhongMaterial Phong网格材质"></a>MeshPhongMaterial Phong网格材质</h2><p>◉ 具有镜面高光的材质。<br>◉ 每个像素都会计算光照。<br>◉ 模拟具有镜面高光的表面（如地板砖）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 基础材质</span><br><span class="hljs-keyword">const</span> sphereGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">SphereGeometry</span>(<span class="hljs-number">4</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><span class="hljs-comment">// shininess属性，决定高光的光泽，值越大光泽越亮。默认是30</span><br><span class="hljs-keyword">const</span> sphereMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshPhongMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0xf37e7d</span>, <span class="hljs-attr">shininess</span>: <span class="hljs-number">50</span>&#125;);<br><span class="hljs-keyword">const</span> sphere = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(sphereGeometry, sphereMaterial);<br><span class="hljs-comment">// 位置</span><br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">4</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 阴影</span><br>sphere.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br>scene.<span class="hljs-title function_">add</span>(sphere);<br></code></pre></td></tr></table></figure><p>运行效果：<br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo3.png"></p><h2 id="基于深度着色的MeshDepthMaterial"><a href="#基于深度着色的MeshDepthMaterial" class="headerlink" title="基于深度着色的MeshDepthMaterial"></a>基于深度着色的MeshDepthMaterial</h2><p>使用这种材质的物体，其外观不是有光照或某个材质属性决定的；而是由物体到相机的距离决定的。可以将这种材质与其他材质想结合，从而很容易地创建出逐渐消失的效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cubeGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">CubeGeometry</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">const</span> cubeMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshDepthMaterial</span>();<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>    <span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(cubeGeometry, cubeMaterial);<br>    cube.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">800</span> * ( <span class="hljs-number">2.0</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">1.0</span> );<br>    cube.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">800</span> * ( <span class="hljs-number">2.0</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">1.0</span> );<br>    cube.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">800</span> * ( <span class="hljs-number">2.0</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">1.0</span> );<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">z</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>    cube.<span class="hljs-title function_">updateMatrix</span>();<br>    cube.<span class="hljs-title function_">add</span>(cube);<br>&#125;<br></code></pre></td></tr></table></figure><p>注意：发现80+的版本不支持这个材质，全部都是黑色，换了一个60的版本的three.js文件，就没问题了。<br>运行效果（初始颜色设置成黑色，黑色好看）<br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo4.png"></p><h2 id="融合材质"><a href="#融合材质" class="headerlink" title="融合材质"></a>融合材质</h2><p>MeshDepthMaterial不能设置颜色，一切都是有材质的默认属性决定的。但是，three.js可通过联合材质创建出新效果。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> cubeGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">CubeGeometry</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">const</span> cubeMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshDepthMaterial</span>();<br><span class="hljs-comment">// 为了使颜色能够有渐变效果，必须设置MeshBasicMaterial的transparent为true，设置融合blending的方式</span><br><span class="hljs-keyword">const</span> cubeColorMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0x00ff00</span>, <span class="hljs-attr">transparent</span>: <span class="hljs-literal">true</span>, <span class="hljs-attr">blending</span>: <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">MultiplyBlending</span>&#125;);<br><span class="hljs-keyword">for</span> (<span class="hljs-keyword">let</span> i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">300</span>; i++) &#123;<br>    <span class="hljs-comment">// 这些方块可以从MeshDepthMaterial对象获得渐变效果，从MeshBasicMaterial获取颜色</span><br>    <span class="hljs-keyword">const</span> sphere = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-property">SceneUtils</span>.<span class="hljs-title function_">createMultiMaterialObject</span>(cubeGeometry, [cubeColorMaterial, sphereMaterial]);<br>    cube.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">800</span> * ( <span class="hljs-number">2.0</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">1.0</span> );<br>    cube.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">800</span> * ( <span class="hljs-number">2.0</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">1.0</span> );<br>    cube.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">800</span> * ( <span class="hljs-number">2.0</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() - <span class="hljs-number">1.0</span> );<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">y</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>    cube.<span class="hljs-property">rotation</span>.<span class="hljs-property">z</span> = <span class="hljs-title class_">Math</span>.<span class="hljs-title function_">random</span>() * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>    cube.<span class="hljs-title function_">updateMatrix</span>();<br>    scene.<span class="hljs-title function_">add</span>(cube);<br>&#125;<br></code></pre></td></tr></table></figure><p>运行效果<br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo5.png"></p><h2 id="为每个面指定材质的MeshFaceMaterial"><a href="#为每个面指定材质的MeshFaceMaterial" class="headerlink" title="为每个面指定材质的MeshFaceMaterial"></a>为每个面指定材质的MeshFaceMaterial</h2><p>通过MeshFaceMaterial可以为几何体的每一个面指定不同的材质。加入你有一个方块，上面有六个面，你可以用这种材质来为每个面指定一个材质。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> <span class="hljs-title class_">CubeGeometry</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">CubeGeometry</span>(<span class="hljs-number">5</span>, <span class="hljs-number">5</span>, <span class="hljs-number">5</span>);<br><span class="hljs-keyword">let</span> mats = [];<br>mats.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0x009e60</span> &#125;));<br>mats.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0x0051ba</span> &#125;));<br>mats.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0xffd500</span> &#125;));<br>mats.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0xff5800</span> &#125;));<br>mats.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0xc41e3a</span> &#125;));<br>mats.<span class="hljs-title function_">push</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123; <span class="hljs-attr">color</span>: <span class="hljs-number">0xffffff</span> &#125;));<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">CubeMaterial</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshFaceMaterial</span>(mats);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">Cube</span> = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(<span class="hljs-title class_">CubeGeometry</span>, <span class="hljs-title class_">CubeMaterial</span>);<br><span class="hljs-title class_">Cube</span>.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0</span>;<br><span class="hljs-title class_">Cube</span>.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">4</span>;<br><span class="hljs-title class_">Cube</span>.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">2</span>;<br><span class="hljs-title class_">Cube</span>.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br>scene.<span class="hljs-title function_">add</span>(<span class="hljs-title class_">Cube</span>);<br></code></pre></td></tr></table></figure><p>运行效果<br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo6.png"></p><h2 id="使用ShaderMaterial创建自己的着色器"><a href="#使用ShaderMaterial创建自己的着色器" class="headerlink" title="使用ShaderMaterial创建自己的着色器"></a>使用ShaderMaterial创建自己的着色器</h2><p>ShaderMaterial是Three.js库中功能最丰富、最复杂的一种材质。通过它，可以使用自己定制的着色器，直接在WebGL环境中运行。ShaderMaterial包含的几个常用属性wireframe、wireframeLinewidth、shading、vertexColors、fog。ShaderMaterial还包含几个特别属性：<br>◉ fragementShader(片元着色器)：这个着色器定义的是每个传入的像素颜色<br>◉ vertexShader(顶点着色器)：这个着色器允许你修改每一个传入的顶点的位置<br>◉ uniforms：通过这个属性可以向你的着色器发信息。同样的信息会发送到每一个顶点和片元<br>◉ defines：这个属性可以转换为vertexShader和fragmentShader里的#define代码。该属性可以用来设置着色器程序里的一些全局变量<br>◉ attributes：改属性可以修改每个顶点和片元。通常用来传递位置数据和法向量相关的数据。如果要用这个属性，anemia你要为几何体中的所有顶点提供信息<br>◉ lights：定义光照数据是否传递给着色器。默认为false<br>在创建ShaderMaterial，必须要传递两个重要的属性vertexShader和fragmentShader。两个都是对应的一段WebGL顶点和片元着色器源码字符串。<br>着色器代码是用的《three.js开发指南》里面的，想学习这个的同学可以看一下。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script id=<span class="hljs-string">&quot;vertex-shader&quot;</span> type=<span class="hljs-string">&quot;x-shader/x-vertex&quot;</span>&gt;<br>  uniform float time;<br>  varying vec2 vUv;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"></span>)&#123;<br>    vec3 posChanged = position;<br>    posChanged.<span class="hljs-property">x</span> = posChanged.<span class="hljs-property">x</span>*(<span class="hljs-title function_">abs</span>(<span class="hljs-title function_">sin</span>(time*<span class="hljs-number">1.0</span>)));<br>    posChanged.<span class="hljs-property">y</span> = posChanged.<span class="hljs-property">y</span>*(<span class="hljs-title function_">abs</span>(<span class="hljs-title function_">cos</span>(time*<span class="hljs-number">1.0</span>)));<br>    posChanged.<span class="hljs-property">z</span> = posChanged.<span class="hljs-property">z</span>*(<span class="hljs-title function_">abs</span>(<span class="hljs-title function_">sin</span>(time*<span class="hljs-number">1.0</span>)));<br>    <span class="hljs-comment">//gl_Position = projectionMatrix * modelViewMatrix * vec4(position*(abs(sin(time)/2.0)+0.5),1.0);</span><br>    gl_Position = projectionMatrix * modelViewMatrix * <span class="hljs-title function_">vec4</span>(posChanged,<span class="hljs-number">1.0</span>);<br>  &#125;<br>&lt;/script&gt;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br><span class="line">68</span><br><span class="line">69</span><br><span class="line">70</span><br><span class="line">71</span><br><span class="line">72</span><br><span class="line">73</span><br><span class="line">74</span><br><span class="line">75</span><br><span class="line">76</span><br><span class="line">77</span><br><span class="line">78</span><br><span class="line">79</span><br><span class="line">80</span><br><span class="line">81</span><br><span class="line">82</span><br><span class="line">83</span><br><span class="line">84</span><br><span class="line">85</span><br><span class="line">86</span><br><span class="line">87</span><br><span class="line">88</span><br><span class="line">89</span><br><span class="line">90</span><br><span class="line">91</span><br><span class="line">92</span><br><span class="line">93</span><br><span class="line">94</span><br><span class="line">95</span><br><span class="line">96</span><br><span class="line">97</span><br><span class="line">98</span><br><span class="line">99</span><br><span class="line">100</span><br><span class="line">101</span><br><span class="line">102</span><br><span class="line">103</span><br><span class="line">104</span><br><span class="line">105</span><br><span class="line">106</span><br><span class="line">107</span><br><span class="line">108</span><br><span class="line">109</span><br><span class="line">110</span><br><span class="line">111</span><br><span class="line">112</span><br><span class="line">113</span><br><span class="line">114</span><br><span class="line">115</span><br><span class="line">116</span><br><span class="line">117</span><br><span class="line">118</span><br><span class="line">119</span><br><span class="line">120</span><br><span class="line">121</span><br><span class="line">122</span><br><span class="line">123</span><br><span class="line">124</span><br><span class="line">125</span><br><span class="line">126</span><br><span class="line">127</span><br><span class="line">128</span><br><span class="line">129</span><br><span class="line">130</span><br><span class="line">131</span><br><span class="line">132</span><br><span class="line">133</span><br><span class="line">134</span><br><span class="line">135</span><br><span class="line">136</span><br><span class="line">137</span><br><span class="line">138</span><br><span class="line">139</span><br><span class="line">140</span><br><span class="line">141</span><br><span class="line">142</span><br><span class="line">143</span><br><span class="line">144</span><br><span class="line">145</span><br><span class="line">146</span><br><span class="line">147</span><br><span class="line">148</span><br><span class="line">149</span><br><span class="line">150</span><br><span class="line">151</span><br><span class="line">152</span><br><span class="line">153</span><br><span class="line">154</span><br><span class="line">155</span><br><span class="line">156</span><br><span class="line">157</span><br><span class="line">158</span><br><span class="line">159</span><br><span class="line">160</span><br><span class="line">161</span><br><span class="line">162</span><br><span class="line">163</span><br><span class="line">164</span><br><span class="line">165</span><br><span class="line">166</span><br><span class="line">167</span><br><span class="line">168</span><br><span class="line">169</span><br><span class="line">170</span><br><span class="line">171</span><br><span class="line">172</span><br><span class="line">173</span><br><span class="line">174</span><br><span class="line">175</span><br><span class="line">176</span><br><span class="line">177</span><br><span class="line">178</span><br><span class="line">179</span><br><span class="line">180</span><br><span class="line">181</span><br><span class="line">182</span><br><span class="line">183</span><br><span class="line">184</span><br><span class="line">185</span><br><span class="line">186</span><br><span class="line">187</span><br><span class="line">188</span><br><span class="line">189</span><br><span class="line">190</span><br><span class="line">191</span><br><span class="line">192</span><br><span class="line">193</span><br><span class="line">194</span><br><span class="line">195</span><br><span class="line">196</span><br><span class="line">197</span><br><span class="line">198</span><br><span class="line">199</span><br><span class="line">200</span><br><span class="line">201</span><br><span class="line">202</span><br><span class="line">203</span><br><span class="line">204</span><br><span class="line">205</span><br><span class="line">206</span><br><span class="line">207</span><br><span class="line">208</span><br><span class="line">209</span><br><span class="line">210</span><br><span class="line">211</span><br><span class="line">212</span><br><span class="line">213</span><br><span class="line">214</span><br><span class="line">215</span><br><span class="line">216</span><br><span class="line">217</span><br><span class="line">218</span><br><span class="line">219</span><br><span class="line">220</span><br><span class="line">221</span><br><span class="line">222</span><br><span class="line">223</span><br><span class="line">224</span><br><span class="line">225</span><br><span class="line">226</span><br><span class="line">227</span><br><span class="line">228</span><br><span class="line">229</span><br><span class="line">230</span><br><span class="line">231</span><br><span class="line">232</span><br><span class="line">233</span><br><span class="line">234</span><br><span class="line">235</span><br><span class="line">236</span><br><span class="line">237</span><br><span class="line">238</span><br><span class="line">239</span><br><span class="line">240</span><br><span class="line">241</span><br><span class="line">242</span><br><span class="line">243</span><br><span class="line">244</span><br><span class="line">245</span><br><span class="line">246</span><br><span class="line">247</span><br><span class="line">248</span><br><span class="line">249</span><br><span class="line">250</span><br><span class="line">251</span><br><span class="line">252</span><br><span class="line">253</span><br><span class="line">254</span><br><span class="line">255</span><br><span class="line">256</span><br><span class="line">257</span><br><span class="line">258</span><br><span class="line">259</span><br><span class="line">260</span><br><span class="line">261</span><br><span class="line">262</span><br><span class="line">263</span><br><span class="line">264</span><br><span class="line">265</span><br><span class="line">266</span><br><span class="line">267</span><br><span class="line">268</span><br><span class="line">269</span><br><span class="line">270</span><br><span class="line">271</span><br><span class="line">272</span><br><span class="line">273</span><br><span class="line">274</span><br><span class="line">275</span><br><span class="line">276</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&lt;script id=<span class="hljs-string">&quot;fragment-shader-1&quot;</span> type=<span class="hljs-string">&quot;x-shader/x-fragment&quot;</span>&gt;<br>  precision highp float;<br>  uniform float time;<br>  uniform float alpha;<br>  uniform vec2 resolution;<br>  varying vec2 vUv;<br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main2</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)<br>  &#123;<br>  vec2 position = vUv;<br>  float red = <span class="hljs-number">1.0</span>;<br>  float green = <span class="hljs-number">0.25</span> + <span class="hljs-title function_">sin</span>(time) * <span class="hljs-number">0.25</span>;<br>  float blue = <span class="hljs-number">0.0</span>;<br>  vec3 rgb = <span class="hljs-title function_">vec3</span>(red, green, blue);<br>  vec4 color = <span class="hljs-title function_">vec4</span>(rgb, alpha);<br>  gl_FragColor = color;<br>  &#125;<br><br>  #define <span class="hljs-variable constant_">PI</span> <span class="hljs-number">3.14159</span><br>  #define <span class="hljs-variable constant_">TWO_PI</span> (<span class="hljs-variable constant_">PI</span>*<span class="hljs-number">2.0</span>)<br>  #define N <span class="hljs-number">68.5</span><br><br>  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)<br>  &#123;<br>  vec2 center = (gl_FragCoord.<span class="hljs-property">xy</span>);<br>  center.<span class="hljs-property">x</span>=-<span class="hljs-number">10.12</span>*<span class="hljs-title function_">sin</span>(time/<span class="hljs-number">200.0</span>);<br>  center.<span class="hljs-property">y</span>=-<span class="hljs-number">10.12</span>*<span class="hljs-title function_">cos</span>(time/<span class="hljs-number">200.0</span>);<br><br>  vec2 v = (gl_FragCoord.<span class="hljs-property">xy</span> - resolution/<span class="hljs-number">20.0</span>) / <span class="hljs-title function_">min</span>(resolution.<span class="hljs-property">y</span>,resolution.<span class="hljs-property">x</span>) * <span class="hljs-number">15.0</span>;<br>  v.<span class="hljs-property">x</span>=v.<span class="hljs-property">x</span>-<span class="hljs-number">10.0</span>;<br>  v.<span class="hljs-property">y</span>=v.<span class="hljs-property">y</span>-<span class="hljs-number">200.0</span>;<br>  float col = <span class="hljs-number">0.0</span>;<br><br>  <span class="hljs-keyword">for</span>(float i = <span class="hljs-number">0.0</span>; i &lt; N; i++)<br>  &#123;<br>  float a = i * (<span class="hljs-variable constant_">TWO_PI</span>/N) * <span class="hljs-number">61.95</span>;<br>  col += <span class="hljs-title function_">cos</span>(<span class="hljs-variable constant_">TWO_PI</span>*(v.<span class="hljs-property">y</span> * <span class="hljs-title function_">cos</span>(a) + v.<span class="hljs-property">x</span> * <span class="hljs-title function_">sin</span>(a) + <span class="hljs-title function_">sin</span>(time*<span class="hljs-number">0.004</span>)*<span class="hljs-number">100.0</span> ));<br>  &#125;<br><br>  col /= <span class="hljs-number">5.0</span>;<br><br>  gl_FragColor = <span class="hljs-title function_">vec4</span>(col*<span class="hljs-number">1.0</span>, -col*<span class="hljs-number">1.0</span>,-col*<span class="hljs-number">4.0</span>, <span class="hljs-number">1.0</span>);<br>  &#125;<br>&lt;/script&gt;<br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-2&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;x-shader/x-fragment&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// from http://glsl.heroku.com/e#7906.0</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  uniform float time;</span></span><br><span class="language-javascript"><span class="language-xml">  uniform vec2 resolution;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// 2013-03-30 by @hintz</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  #define <span class="hljs-title class_">CGFloat</span> float</span></span><br><span class="language-javascript"><span class="language-xml">  #define <span class="hljs-variable constant_">M_PI</span> <span class="hljs-number">3.14159265359</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec3 <span class="hljs-title function_">hsvtorgb</span>(<span class="hljs-params">float h, float s, float v</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  float c = v * s;</span></span><br><span class="language-javascript"><span class="language-xml">  h = <span class="hljs-title function_">mod</span>((h * <span class="hljs-number">6.0</span>), <span class="hljs-number">6.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  float x = c * (<span class="hljs-number">1.0</span> - <span class="hljs-title function_">abs</span>(<span class="hljs-title function_">mod</span>(h, <span class="hljs-number">2.0</span>) - <span class="hljs-number">1.0</span>));</span></span><br><span class="language-javascript"><span class="language-xml">  vec3 color;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span> (<span class="hljs-number">0.0</span> &lt;= h &amp;&amp; h &lt; <span class="hljs-number">1.0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color = <span class="hljs-title function_">vec3</span>(c, x, <span class="hljs-number">0.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">1.0</span> &lt;= h &amp;&amp; h &lt; <span class="hljs-number">2.0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color = <span class="hljs-title function_">vec3</span>(x, c, <span class="hljs-number">0.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">2.0</span> &lt;= h &amp;&amp; h &lt; <span class="hljs-number">3.0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color = <span class="hljs-title function_">vec3</span>(<span class="hljs-number">0.0</span>, c, x);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">3.0</span> &lt;= h &amp;&amp; h &lt; <span class="hljs-number">4.0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color = <span class="hljs-title function_">vec3</span>(<span class="hljs-number">0.0</span>, x, c);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">4.0</span> &lt;= h &amp;&amp; h &lt; <span class="hljs-number">5.0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color = <span class="hljs-title function_">vec3</span>(x, <span class="hljs-number">0.0</span>, c);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">else</span> <span class="hljs-keyword">if</span> (<span class="hljs-number">5.0</span> &lt;= h &amp;&amp; h &lt; <span class="hljs-number">6.0</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color = <span class="hljs-title function_">vec3</span>(c, <span class="hljs-number">0.0</span>, x);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">else</span></span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color = <span class="hljs-title function_">vec3</span>(<span class="hljs-number">0.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  color += v - c;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> color;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec2 position = (gl_FragCoord.<span class="hljs-property">xy</span> - <span class="hljs-number">0.5</span> * resolution) / resolution.<span class="hljs-property">y</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float x = position.<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float y = position.<span class="hljs-property">y</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> a = <span class="hljs-title function_">atan</span>(x, y);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> d = <span class="hljs-title function_">sqrt</span>(x*x+y*y);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> d0 = <span class="hljs-number">0.5</span>*(<span class="hljs-title function_">sin</span>(d-time)+<span class="hljs-number">1.5</span>)*d;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> d1 = <span class="hljs-number">5.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> u = <span class="hljs-title function_">mod</span>(a*d1+<span class="hljs-title function_">sin</span>(d*<span class="hljs-number">10.0</span>+time), <span class="hljs-variable constant_">M_PI</span>*<span class="hljs-number">2.0</span>)/<span class="hljs-variable constant_">M_PI</span>*<span class="hljs-number">0.5</span> - <span class="hljs-number">0.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> v = <span class="hljs-title function_">mod</span>(<span class="hljs-title function_">pow</span>(d0*<span class="hljs-number">4.0</span>, <span class="hljs-number">0.75</span>),<span class="hljs-number">1.0</span>) - <span class="hljs-number">0.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> dd = <span class="hljs-title function_">sqrt</span>(u*u+v*v);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> aa = <span class="hljs-title function_">atan</span>(u, v);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> uu = <span class="hljs-title function_">mod</span>(aa*<span class="hljs-number">3.0</span>+<span class="hljs-number">3.0</span>*<span class="hljs-title function_">cos</span>(dd*<span class="hljs-number">30.0</span>-time), <span class="hljs-variable constant_">M_PI</span>*<span class="hljs-number">2.0</span>)/<span class="hljs-variable constant_">M_PI</span>*<span class="hljs-number">0.5</span> - <span class="hljs-number">0.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// CGFloat vv = mod(dd*4.0,1.0) - 0.5;</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title class_">CGFloat</span> d2 = <span class="hljs-title function_">sqrt</span>(uu*uu+v*v)*<span class="hljs-number">1.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  gl_FragColor = <span class="hljs-title function_">vec4</span>( <span class="hljs-title function_">hsvtorgb</span>(dd+time*<span class="hljs-number">0.5</span>/d1, <span class="hljs-title function_">sin</span>(dd*time), d2), <span class="hljs-number">1.0</span> );</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-3&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;x-shader/x-fragment&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  uniform float time;</span></span><br><span class="language-javascript"><span class="language-xml">  uniform vec2 resolution;</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">// tie nd die by Snoep Games.</span></span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"> <span class="hljs-keyword">void</span> </span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  vec3 color = <span class="hljs-title function_">vec3</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.</span>, <span class="hljs-number">0.</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  vec2 pos = (( <span class="hljs-number">1.4</span> * gl_FragCoord.<span class="hljs-property">xy</span> - resolution.<span class="hljs-property">xy</span>) / resolution.<span class="hljs-property">xx</span>)*<span class="hljs-number">1.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float r=<span class="hljs-title function_">sqrt</span>(pos.<span class="hljs-property">x</span>*pos.<span class="hljs-property">x</span>+pos.<span class="hljs-property">y</span>*pos.<span class="hljs-property">y</span>)/<span class="hljs-number">15.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float size1=<span class="hljs-number">2.0</span>*<span class="hljs-title function_">cos</span>(time/<span class="hljs-number">60.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  float size2=<span class="hljs-number">2.5</span>*<span class="hljs-title function_">sin</span>(time/<span class="hljs-number">12.1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  float rot1=<span class="hljs-number">13.00</span>; <span class="hljs-comment">//82.0+16.0*sin(time/4.0);</span></span></span><br><span class="language-javascript"><span class="language-xml">  float rot2=-<span class="hljs-number">50.00</span>; <span class="hljs-comment">//82.0+16.0*sin(time/8.0);</span></span></span><br><span class="language-javascript"><span class="language-xml">  float t=<span class="hljs-title function_">sin</span>(time);</span></span><br><span class="language-javascript"><span class="language-xml">  float a = (<span class="hljs-number">60.0</span>)*<span class="hljs-title function_">sin</span>(rot1*<span class="hljs-title function_">atan</span>(pos.<span class="hljs-property">x</span>-size1*pos.<span class="hljs-property">y</span>/r,pos.<span class="hljs-property">y</span>+size1*pos.<span class="hljs-property">x</span>/r)+time);</span></span><br><span class="language-javascript"><span class="language-xml">  a += <span class="hljs-number">200.0</span>*<span class="hljs-title function_">acos</span>(pos.<span class="hljs-property">x</span>*<span class="hljs-number">2.0</span>+<span class="hljs-title function_">cos</span>(time/<span class="hljs-number">2.0</span>))+<span class="hljs-title function_">asin</span>(pos.<span class="hljs-property">y</span>*<span class="hljs-number">5.0</span>+<span class="hljs-title function_">sin</span>(time/<span class="hljs-number">2.0</span>));</span></span><br><span class="language-javascript"><span class="language-xml">  a=a*(r/<span class="hljs-number">50.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  a=<span class="hljs-number">200.0</span>*<span class="hljs-title function_">sin</span>(a*<span class="hljs-number">5.0</span>)*(r/<span class="hljs-number">30.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span>(a&gt;<span class="hljs-number">5.0</span>) a=a/<span class="hljs-number">200.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">if</span>(a&lt;<span class="hljs-number">0.5</span>) a=a*<span class="hljs-number">22.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  gl_FragColor = <span class="hljs-title function_">vec4</span>( <span class="hljs-title function_">cos</span>(a/<span class="hljs-number">20.0</span>),a*<span class="hljs-title function_">cos</span>(a/<span class="hljs-number">200.0</span>),<span class="hljs-title function_">sin</span>(a/<span class="hljs-number">8.0</span>), <span class="hljs-number">1.0</span> );</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-4&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;x-shader/x-fragment&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  uniform float time;</span></span><br><span class="language-javascript"><span class="language-xml">  uniform vec2 resolution;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec2 <span class="hljs-title function_">rand</span>(<span class="hljs-params">vec2 pos</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">fract</span>(</span></span><br><span class="language-javascript"><span class="language-xml">  (</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">pow</span>(</span></span><br><span class="language-javascript"><span class="language-xml">  pos+<span class="hljs-number">2.0</span>,</span></span><br><span class="language-javascript"><span class="language-xml">  pos.<span class="hljs-property">yx</span>+<span class="hljs-number">2.0</span></span></span><br><span class="language-javascript"><span class="language-xml">  )*<span class="hljs-number">555555.0</span></span></span><br><span class="language-javascript"><span class="language-xml">  )</span></span><br><span class="language-javascript"><span class="language-xml">  );</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec2 <span class="hljs-title function_">rand2</span>(<span class="hljs-params">vec2 pos</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rand</span>(<span class="hljs-title function_">rand</span>(pos));</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  float <span class="hljs-title function_">softnoise</span>(<span class="hljs-params">vec2 pos, float scale</span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  vec2 smplpos = pos * scale;</span></span><br><span class="language-javascript"><span class="language-xml">  float c0 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float c1 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float c2 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float c3 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec2 a = <span class="hljs-title function_">fract</span>(smplpos);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> <span class="hljs-title function_">mix</span>(<span class="hljs-title function_">mix</span>(c0, c1, <span class="hljs-title function_">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, a.<span class="hljs-property">x</span>)),</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mix</span>(c2, c3, <span class="hljs-title function_">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, a.<span class="hljs-property">x</span>)),</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, a.<span class="hljs-property">x</span>));</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"> <span class="hljs-keyword">void</span> </span>) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  vec2 pos = gl_FragCoord.<span class="hljs-property">xy</span> / resolution.<span class="hljs-property">y</span> - time * <span class="hljs-number">0.4</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  float color = <span class="hljs-number">0.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float s = <span class="hljs-number">1.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">for</span> (int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">6</span>; ++i) &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color += <span class="hljs-title function_">softnoise</span>(pos + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">0.01</span> * <span class="hljs-title function_">float</span>(i)), s * <span class="hljs-number">4.0</span>) / s / <span class="hljs-number">2.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  s *= <span class="hljs-number">2.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  gl_FragColor = <span class="hljs-title function_">vec4</span>(color,<span class="hljs-title function_">mix</span>(color,<span class="hljs-title function_">cos</span>(color),<span class="hljs-title function_">sin</span>(color)),color,<span class="hljs-number">1</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-5&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;x-shader/x-fragment&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  uniform vec2 resolution;</span></span><br><span class="language-javascript"><span class="language-xml">  uniform float time;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec2 <span class="hljs-title function_">rand</span>(<span class="hljs-params">vec2 pos</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> <span class="hljs-title function_">fract</span>( <span class="hljs-number">0.00005</span> * (<span class="hljs-title function_">pow</span>(pos+<span class="hljs-number">2.0</span>, pos.<span class="hljs-property">yx</span> + <span class="hljs-number">1.0</span>) * <span class="hljs-number">22222.0</span>));</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  vec2 <span class="hljs-title function_">rand2</span>(<span class="hljs-params">vec2 pos</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> <span class="hljs-title function_">rand</span>(<span class="hljs-title function_">rand</span>(pos));</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  float <span class="hljs-title function_">softnoise</span>(<span class="hljs-params">vec2 pos, float scale</span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  vec2 smplpos = pos * scale;</span></span><br><span class="language-javascript"><span class="language-xml">  float c0 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">0.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float c1 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">0.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float c2 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float c3 = <span class="hljs-title function_">rand2</span>((<span class="hljs-title function_">floor</span>(smplpos) + <span class="hljs-title function_">vec2</span>(<span class="hljs-number">1.0</span>, <span class="hljs-number">1.0</span>)) / scale).<span class="hljs-property">x</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec2 a = <span class="hljs-title function_">fract</span>(smplpos);</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">return</span> <span class="hljs-title function_">mix</span>(</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mix</span>(c0, c1, <span class="hljs-title function_">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, a.<span class="hljs-property">x</span>)),</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">mix</span>(c2, c3, <span class="hljs-title function_">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, a.<span class="hljs-property">x</span>)),</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-title function_">smoothstep</span>(<span class="hljs-number">0.0</span>, <span class="hljs-number">1.0</span>, a.<span class="hljs-property">y</span>));</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"><span class="hljs-keyword">void</span></span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  vec2 pos = gl_FragCoord.<span class="hljs-property">xy</span> / resolution.<span class="hljs-property">y</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  pos.<span class="hljs-property">x</span> += time * <span class="hljs-number">0.1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float color = <span class="hljs-number">0.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float s = <span class="hljs-number">1.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">for</span>(int i = <span class="hljs-number">0</span>; i &lt; <span class="hljs-number">8</span>; i++)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  color += <span class="hljs-title function_">softnoise</span>(pos+<span class="hljs-title function_">vec2</span>(i)*<span class="hljs-number">0.02</span>, s * <span class="hljs-number">4.0</span>) / s / <span class="hljs-number">2.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  s *= <span class="hljs-number">2.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml">  gl_FragColor = <span class="hljs-title function_">vec4</span>(color);</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br><span class="language-xml"></span><br><span class="language-xml"><span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;fragment-shader-6&quot;</span> <span class="hljs-attr">type</span>=<span class="hljs-string">&quot;x-shader/x-fragment&quot;</span>&gt;</span><span class="language-javascript"></span></span><br><span class="language-javascript"><span class="language-xml">  </span></span><br><span class="language-javascript"><span class="language-xml">  uniform float time;</span></span><br><span class="language-javascript"><span class="language-xml">  uniform vec2 resolution;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">void</span> <span class="hljs-title function_">main</span>(<span class="hljs-params"> <span class="hljs-keyword">void</span> </span>)</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec2 uPos = ( gl_FragCoord.<span class="hljs-property">xy</span> / resolution.<span class="hljs-property">xy</span> );<span class="hljs-comment">//normalize wrt y axis</span></span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-comment">//suPos -= vec2((resolution.x/resolution.y)/2.0, 0.0);//shift origin to center</span></span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  uPos.<span class="hljs-property">x</span> -= <span class="hljs-number">1.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  uPos.<span class="hljs-property">y</span> -= <span class="hljs-number">0.5</span>;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec3 color = <span class="hljs-title function_">vec3</span>(<span class="hljs-number">0.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  float vertColor = <span class="hljs-number">2.0</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  <span class="hljs-keyword">for</span>( float i = <span class="hljs-number">0.0</span>; i &lt; <span class="hljs-number">15.0</span>; ++i )</span></span><br><span class="language-javascript"><span class="language-xml">  &#123;</span></span><br><span class="language-javascript"><span class="language-xml">  float t = time * (<span class="hljs-number">0.9</span>);</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  uPos.<span class="hljs-property">y</span> += <span class="hljs-title function_">sin</span>( uPos.<span class="hljs-property">x</span>*i + t+i/<span class="hljs-number">2.0</span> ) * <span class="hljs-number">0.1</span>;</span></span><br><span class="language-javascript"><span class="language-xml">  float fTemp = <span class="hljs-title function_">abs</span>(<span class="hljs-number">1.0</span> / uPos.<span class="hljs-property">y</span> / <span class="hljs-number">100.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  vertColor += fTemp;</span></span><br><span class="language-javascript"><span class="language-xml">  color += <span class="hljs-title function_">vec3</span>( fTemp*(<span class="hljs-number">10.0</span>-i)/<span class="hljs-number">10.0</span>, fTemp*i/<span class="hljs-number">10.0</span>, <span class="hljs-title function_">pow</span>(fTemp,<span class="hljs-number">1.5</span>)*<span class="hljs-number">1.5</span> );</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span></span><br><span class="language-javascript"><span class="language-xml">  vec4 color_final = <span class="hljs-title function_">vec4</span>(color, <span class="hljs-number">1.0</span>);</span></span><br><span class="language-javascript"><span class="language-xml">  gl_FragColor = color_final;</span></span><br><span class="language-javascript"><span class="language-xml">  &#125;</span></span><br><span class="language-javascript"><span class="language-xml"></span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span></span><br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//创建ShaderMaterial纹理的函数</span><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">createMaterial</span>(<span class="hljs-params">vertexShader, fragmentShader</span>) &#123;<br>    <span class="hljs-keyword">const</span> vertShader = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(vertexShader).<span class="hljs-property">innerHTML</span>; <span class="hljs-comment">//获取顶点着色器的代码</span><br>    <span class="hljs-keyword">const</span> fragShader = <span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(fragmentShader).<span class="hljs-property">innerHTML</span>; <span class="hljs-comment">//获取片元着色器的代码</span><br>    <span class="hljs-comment">//配置着色器里面的attribute变量的值</span><br>    <span class="hljs-keyword">const</span> attributes = &#123;&#125;;<br>    <span class="hljs-comment">//配置着色器里面的uniform变量的值</span><br>    <span class="hljs-keyword">const</span> uniforms = &#123;<br>        <span class="hljs-attr">time</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">0.2</span> &#125;,<br>        <span class="hljs-attr">scale</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">0.2</span> &#125;,<br>        <span class="hljs-attr">alpha</span>: &#123; <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;f&quot;</span>, <span class="hljs-attr">value</span>: <span class="hljs-number">0.6</span> &#125;,<br>        <span class="hljs-attr">resolution</span>: &#123;<br>            <span class="hljs-attr">type</span>: <span class="hljs-string">&quot;v2&quot;</span>,<br>            <span class="hljs-attr">value</span>: <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Vector2</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>),<br>        &#125;,<br>    &#125;;<br>    <span class="hljs-keyword">const</span> meshMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">ShaderMaterial</span>(&#123;<br>        <span class="hljs-attr">uniforms</span>: uniforms,<br>        <span class="hljs-attr">defaultAttributeValues</span>: attributes,<br>        <span class="hljs-attr">vertexShader</span>: vertShader,<br>        <span class="hljs-attr">fragmentShader</span>: fragShader,<br>        <span class="hljs-attr">transparent</span>: <span class="hljs-literal">true</span>,<br>    &#125;);<br>    <span class="hljs-keyword">return</span> meshMaterial;<br>&#125;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">//声明一个立方体几何图形</span><br><span class="hljs-keyword">const</span> cubeGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">20</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>)<br><span class="hljs-comment">//创建立方体六个面的纹理</span><br><span class="hljs-keyword">const</span> meshMaterial1 = <span class="hljs-title function_">createMaterial</span>(<br>    <span class="hljs-string">&quot;vertex-shader&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-1&quot;</span><br>);<br><span class="hljs-keyword">const</span> meshMaterial2 = <span class="hljs-title function_">createMaterial</span>(<br>    <span class="hljs-string">&quot;vertex-shader&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-2&quot;</span><br>);<br><span class="hljs-keyword">const</span> meshMaterial3 = <span class="hljs-title function_">createMaterial</span>(<br>    <span class="hljs-string">&quot;vertex-shader&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-3&quot;</span><br>);<br><span class="hljs-keyword">const</span> meshMaterial4 = <span class="hljs-title function_">createMaterial</span>(<br>    <span class="hljs-string">&quot;vertex-shader&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-4&quot;</span><br>);<br><span class="hljs-keyword">const</span> meshMaterial5 = <span class="hljs-title function_">createMaterial</span>(<br>    <span class="hljs-string">&quot;vertex-shader&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-5&quot;</span><br>);<br><span class="hljs-keyword">const</span> meshMaterial6 = <span class="hljs-title function_">createMaterial</span>(<br>    <span class="hljs-string">&quot;vertex-shader&quot;</span>,<br>    <span class="hljs-string">&quot;fragment-shader-6&quot;</span><br>);<br><span class="hljs-keyword">const</span> material = [<br>    meshMaterial6,<br>    meshMaterial5,<br>    meshMaterial4,<br>     meshMaterial3,<br>    meshMaterial2,<br>    meshMaterial1,<br>]<br><span class="hljs-keyword">const</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(cubeGeometry, material);<br>scene.<span class="hljs-title function_">add</span>(cube);<br></code></pre></td></tr></table></figure><p>运行效果（虽然有点像理发店门口的，将就看一下）<br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo7.png"><br><img src="/2022/03/12/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E6%9D%90%E8%B4%A8Material%EF%BC%89/demo8.png"></p><h2 id="总结一下"><a href="#总结一下" class="headerlink" title="总结一下"></a>总结一下</h2><p>在three.js中越复杂的材质会消耗更多的GPU功耗。在绘制物体时我们就需要判断需要那些材质功能，找到对应的材质以此来减少程序的消耗。</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Three.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习一下three.js（再入门一点点）</title>
    <link href="/2022/03/11/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%86%8D%E5%85%A5%E9%97%A8%E4%B8%80%E7%82%B9%E7%82%B9%EF%BC%89/"/>
    <url>/2022/03/11/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%86%8D%E5%85%A5%E9%97%A8%E4%B8%80%E7%82%B9%E7%82%B9%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>上一节我们创建了只能看的页面，继续学习一点点…</p><h2 id="增加立方体和球体"><a href="#增加立方体和球体" class="headerlink" title="增加立方体和球体"></a>增加立方体和球体</h2><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 添加立方体</span><br><span class="hljs-keyword">var</span> cubeGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">BoxGeometry</span>(<span class="hljs-number">4</span>, <span class="hljs-number">4</span>, <span class="hljs-number">4</span>);<br><span class="hljs-keyword">var</span> cubeMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshLambertMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0xff0000</span>&#125;);<br><span class="hljs-keyword">var</span> cube = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(cubeGeometry, cubeMaterial);    <br>cube.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">0</span>;<br>cube.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">4</span>; <br>cube.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">2</span>;<br><span class="hljs-comment">// 对象是否渲染倒阴影贴图中</span><br>cube.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br>scene.<span class="hljs-title function_">add</span>(cube)<br><br><span class="hljs-comment">// 添加球体</span><br><span class="hljs-keyword">var</span> sphereGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">SphereGeometry</span>(<span class="hljs-number">4</span>, <span class="hljs-number">20</span>, <span class="hljs-number">20</span>);<br><span class="hljs-keyword">var</span> sphereMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshLambertMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0xff0000</span>&#125;);<br><span class="hljs-keyword">var</span> sphere = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(sphereGeometry, sphereMaterial)<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">10</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">4</span>;<br>sphere.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">0</span>;<br>sphere.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br>scene.<span class="hljs-title function_">add</span>(sphere);<br></code></pre></td></tr></table></figure><p>但此时页面并不能看到立方体和球体，这时神说：要有光！那么我们就添加光源</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建聚光灯</span><br><span class="hljs-keyword">var</span> spotLight = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">SpotLight</span>(<span class="hljs-number">0xffffff</span>);<br>spotLight.<span class="hljs-property">position</span>.<span class="hljs-title function_">set</span>(<span class="hljs-number">30</span>, <span class="hljs-number">30</span>, -<span class="hljs-number">10</span>);<br>spotLight.<span class="hljs-property">castShadow</span> = <span class="hljs-literal">true</span>;<br><span class="hljs-comment">// 添加聚光灯</span><br>scene.<span class="hljs-title function_">add</span>(spotLight)<br></code></pre></td></tr></table></figure><h2 id="动画实现"><a href="#动画实现" class="headerlink" title="动画实现"></a>动画实现</h2><p>下面代码两种方式都能够实现动画效果，但是用setInterval会用卡针的现象</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>    <span class="hljs-comment">// 每次绕y轴转0.01</span><br>    cube.<span class="hljs-title function_">rotateY</span>(<span class="hljs-number">0.01</span>);<br>&#125;<br><span class="hljs-built_in">setInterval</span>(render, <span class="hljs-number">16</span><br><br><span class="hljs-keyword">let</span> <span class="hljs-variable constant_">T0</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">render</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-keyword">let</span> <span class="hljs-variable constant_">T1</span> = <span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>();<br>    <span class="hljs-keyword">let</span> t = <span class="hljs-variable constant_">T1</span> - <span class="hljs-variable constant_">T0</span>;<br>    <span class="hljs-variable constant_">T0</span> = <span class="hljs-variable constant_">T1</span>;<br>    renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>    <span class="hljs-comment">// 每次绕y轴转0.01弧度</span><br>    <span class="hljs-comment">// cube.rotateY(0.01);</span><br>    <span class="hljs-comment">// 每一毫秒渲染0.001弧度</span><br>    cube.<span class="hljs-title function_">rotateY</span>(<span class="hljs-number">0.001</span> * t);<br>    <span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(render);<br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-title function_">requestAnimationFrame</span>(render);<br></code></pre></td></tr></table></figure><h2 id="鼠标控制三维场景"><a href="#鼠标控制三维场景" class="headerlink" title="鼠标控制三维场景"></a>鼠标控制三维场景</h2><p>引入OrbitControls.js</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建controls对象</span><br><span class="hljs-keyword">var</span> controls = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">OrbitControls</span>(camera, renderer.<span class="hljs-property">domElement</span>);<br><span class="hljs-comment">// 监听控制器的鼠标事件，执行渲染内容</span><br>controls.<span class="hljs-title function_">addEventListener</span>(<span class="hljs-string">&#x27;change&#x27;</span>, <span class="hljs-function">() =&gt;</span> &#123;<br>renderer.<span class="hljs-title function_">render</span>(scene, camera);<br>&#125;)<br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img src="/2022/03/11/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%86%8D%E5%85%A5%E9%97%A8%E4%B8%80%E7%82%B9%E7%82%B9%EF%BC%89/demo2.png"></p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Three.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>学习一下three.js（入门）</title>
    <link href="/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/"/>
    <url>/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<p>cesium中没有实现城市建筑泛光效果(网上的方法需修改源码)，试试three.js实现，从而开启学习之旅~</p><h2 id="什么是Three-js"><a href="#什么是Three-js" class="headerlink" title="什么是Three.js"></a>什么是Three.js</h2><p>想要了解three.js，我们先了解一下WebGL是什么。WebGL是一个只能画点、线和三角形的非常底层的系统。简单来说就是使用WebGL提供的api可以在画布的三维坐标中，绘制点、线、三角行。我们所看见的立体图形都是通过三角行组合而来的。<br><img src="/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/rabbit.png"><br>想要用WebGL来做一些实用的东西通常需要大量的代码，这就出现了对WebGL Api进行封装后的库Three.js。它封装了诸如场景、灯光、阴影、材质、贴图、空间运算等一系列功能，让我们不需要在去关心WebGL的复杂原理。</p><h2 id="整个程序的结构"><a href="#整个程序的结构" class="headerlink" title="整个程序的结构"></a>整个程序的结构</h2><p><img src="/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/three.png"></p><h4 id="场景-Scene"><a href="#场景-Scene" class="headerlink" title="场景(Scene)"></a>场景(Scene)</h4><p>它就相当于一个大容器，我们需要展示的所有物体都要放入场景。如上图所示当把其对象放入场景后形成树状结构，就组合成场景图。在场景图中子对象的位置和方向总是相对于父对象而言的，比如我移动了父对象的位置，子对象也会一起移动。</p><h4 id="摄像机-Camera"><a href="#摄像机-Camera" class="headerlink" title="摄像机(Camera)"></a>摄像机(Camera)</h4><p>它与其他对象不同的是，它不一定要在场景图中才能起作用，它可以和场景同级。相同的是，摄像机(Camera)作为其他对象的子对象，同样会继承它父对象的位置和朝向。Three.js内置两种摄像机<img src="/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/contrast.webp"><br>◉ 正交相机(OrthographicCamera)：在这种投影模式下，无论物体距离相机距离远或者近，在最终渲染的图片中物体的大小都保持不变。正交投影相机的视景体是一个长方体，OrthographicCamera 的构造函数是这样的：OrthographicCamera( left, right, top, bottom, near, far )。Camera本身可以看作是一个点，left 则表示左平面在左右方向上与 Camera 的距离。另外几个参数同理。于是六个参数分别定义了视景体六个面的位置。可以近似地认为，视景体里的物体平行投影到近平面上，然后近平面上的图像被渲染到屏幕上。<br><img src="/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/1444794-71391f0b7a5e52a0.webp"><br>◉ 透视相机(PerspectiveCamera)：这一投影模式被用来模拟人眼所看到的景象，它是3D场景的渲染中使用得最普遍的投影模式。透视投影相机的视景体是个四棱台，它的构造函数是这样的：PerspectiveCamera( fov, aspect, near, far )。fov 对应着图中的视角，是上下两面的夹角。aspect 是近平面的宽高比。在加上近平面距离 near，远平面距离 far，就可以唯一确定这个视景体了。透视投影相机很符合我们通常的看东西的感觉，因此大多数情况下我们都是用透视投影相机展示3D效果。<br><img src="/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/1444794-3d7bda8ab09d5bf8.webp"></p><h4 id="渲染器-Renderer"><a href="#渲染器-Renderer" class="headerlink" title="渲染器(Renderer)"></a>渲染器(Renderer)</h4><p>它是Three.js的主要对象，场景(Scene)和摄像机(Camera)都需要传入渲染器(Renderer)中，通过它将摄像机视椎体中的三维场景渲染成一个二维图片显示在画布上。</p><h4 id="网格-Mesh"><a href="#网格-Mesh" class="headerlink" title="网格(Mesh)"></a>网格(Mesh)</h4><p>在 Three 中，Mesh 的构造函数是这样的：Mesh( geometry, material )。geometry 是它的形状，material 是它的材质。不止是 Mesh，创建很多物体都要用到这两个属性。下面我们来看看这两个重要的属性。</p><h4 id="几何体-Geometry"><a href="#几何体-Geometry" class="headerlink" title="几何体(Geometry)"></a>几何体(Geometry)</h4><p>就是球体、立方体、平面、狗、猫、人、树、建筑等物体的顶点信息。Three.js内置了许多基本几何体:<br>◉ CubeGeometry 立方体<br>◉ PlaneGeometry 平面<br>◉ SphereGeometry 球体<br>◉ CylinderGeometry 圆柱体<br>◉ TorusGeometry 圆环面<br>◉ TubeGeometry 管道缓冲几何体<br>对于比较复杂的形状，我们还可以通过外部的模型文件导入。</p><h4 id="材质-Material"><a href="#材质-Material" class="headerlink" title="材质(Material)"></a>材质(Material)</h4><p>和几何体同时使用，表示几何体不同面的颜色，和光亮程度。Three.js内置了许多材质:<br>◉ MeshBasicMaterial 基础网格材质，不受光照的影响。<br>◉ MeshDistanceMaterial 通过点光源实现阴影的材质。<br>◉ MeshNormalMaterial 一种把法向量映射到RGB颜色的材质。</p><h4 id="纹理-Texture"><a href="#纹理-Texture" class="headerlink" title="纹理(Texture)"></a>纹理(Texture)</h4><p>创建一个纹理贴图，将其应用到一个表面，或者作为反射&#x2F;折射贴图。可以多个纹理同时在一个材质上使用。</p><h4 id="光源-Light"><a href="#光源-Light" class="headerlink" title="光源(Light)"></a>光源(Light)</h4><p>和材质配合使用，通过不同的光源来修改颜色，添加阴影等。<br>◉ AmbientLight 环境光，会均匀的照亮场景中的所有物体。<br>◉ DirectionalLight 平行光，是沿着特定方向发射的光。<br>◉ HemisphereLight 半球光，光源直接放置于场景之上，光照颜色从天空光线颜色渐变到地面光线颜色。不可以投射阴影。<br>◉ PointLight 点光源，从一个点向各个方向发射的光源。可以投射阴影。</p><h2 id="开始使用"><a href="#开始使用" class="headerlink" title="开始使用"></a>开始使用</h2><p>首先，我们需要在 Github 下载 Three.js 的代码，在使用 Three.js 之前，我们需要在 HTML 文件中引用该文件，然后就能通过全局变量THREE访问到所有属性和方法了。</p><figure class="highlight html"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br></pre></div></td><td class="code"><pre><code class="hljs html"><span class="hljs-meta">&lt;!DOCTYPE <span class="hljs-keyword">html</span>&gt;</span><br><span class="hljs-tag">&lt;<span class="hljs-name">html</span> <span class="hljs-attr">lang</span>=<span class="hljs-string">&quot;en&quot;</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">head</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">charset</span>=<span class="hljs-string">&quot;UTF-8&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">http-equiv</span>=<span class="hljs-string">&quot;X-UA-Compatible&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;IE=edge&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">meta</span> <span class="hljs-attr">name</span>=<span class="hljs-string">&quot;viewport&quot;</span> <span class="hljs-attr">content</span>=<span class="hljs-string">&quot;width=device-width, initial-scale=1.0&quot;</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">title</span>&gt;</span>Document<span class="hljs-tag">&lt;/<span class="hljs-name">title</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">script</span> <span class="hljs-attr">src</span>=<span class="hljs-string">&quot;./three.js&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">script</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">style</span>&gt;</span><span class="language-css"></span><br><span class="language-css">      <span class="hljs-selector-tag">body</span> &#123;</span><br><span class="language-css">        <span class="hljs-comment">/* 边距设置为0，设置溢出隐藏，完整的使用整个页面 */</span></span><br><span class="language-css">        <span class="hljs-attribute">margin</span>: <span class="hljs-number">0</span>;</span><br><span class="language-css">        <span class="hljs-attribute">overflow</span>: hidden;</span><br><span class="language-css">      &#125;</span><br><span class="language-css">    </span><span class="hljs-tag">&lt;/<span class="hljs-name">style</span>&gt;</span><br>  <span class="hljs-tag">&lt;/<span class="hljs-name">head</span>&gt;</span><br>  <span class="hljs-tag">&lt;<span class="hljs-name">body</span>&gt;</span><br>    <span class="hljs-tag">&lt;<span class="hljs-name">div</span> <span class="hljs-attr">id</span>=<span class="hljs-string">&quot;webgl-output&quot;</span>&gt;</span><span class="hljs-tag">&lt;/<span class="hljs-name">div</span>&gt;</span><br><span class="hljs-tag">&lt;/<span class="hljs-name">body</span>&gt;</span><br></code></pre></td></tr></table></figure><p>在JavaScript代码中定义一个init函数，在HTML加载完后执行。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">init</span>(<span class="hljs-params"></span>) &#123;<br>    <span class="hljs-comment">// ...</span><br>&#125;<br><span class="hljs-variable language_">window</span>.<span class="hljs-property">onload</span> = init;<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建场景</span><br><span class="hljs-keyword">var</span> scene = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Scene</span>();<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 设置摄像机</span><br><span class="hljs-keyword">var</span> camera = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PerspectiveCamera</span>(<span class="hljs-number">45</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span> / <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>, <span class="hljs-number">0.1</span>, <span class="hljs-number">2000</span>)<br><span class="hljs-comment">// 定位相机，并指向场景中心</span><br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">30</span>;<br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">40</span>;<br>camera.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">30</span>;<br>camera.<span class="hljs-title function_">lookAt</span>(scene.<span class="hljs-property">position</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 创建渲染器</span><br><span class="hljs-keyword">var</span> renderer = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">WebGLRenderer</span>();<br><span class="hljs-comment">// 设置渲染器的初始颜色</span><br>renderer.<span class="hljs-title function_">setClearColor</span>(<span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Color</span>(<span class="hljs-number">0xeeeeee</span>));<br><span class="hljs-comment">// 设置输出canvas画面的大小</span><br>renderer.<span class="hljs-title function_">setSize</span>(<span class="hljs-variable language_">window</span>.<span class="hljs-property">innerWidth</span>, <span class="hljs-variable language_">window</span>.<span class="hljs-property">innerHeight</span>);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 显示三维坐标系</span><br><span class="hljs-comment">// 里面的20是显示坐标轴的长度，红色代表x轴，绿色代表y轴，蓝色代表z轴</span><br><span class="hljs-keyword">var</span> axes = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">AxisHelper</span>(<span class="hljs-number">20</span>);<br><span class="hljs-comment">// 添加坐标系到场景中</span><br>scene.<span class="hljs-title function_">add</span>(axes);<br><span class="hljs-comment">// 创建地面的几何体，长60，宽20</span><br><span class="hljs-keyword">var</span>  planeGeometry = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">PlaneGeometry</span>(<span class="hljs-number">60</span>, <span class="hljs-number">20</span>);<br><span class="hljs-comment">// 给地面物体上色</span><br><span class="hljs-keyword">var</span> planeMaterial = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">MeshBasicMaterial</span>(&#123;<span class="hljs-attr">color</span>: <span class="hljs-number">0xcccccc</span>&#125;);<br><span class="hljs-comment">// 创建地面</span><br><span class="hljs-keyword">var</span> plane = <span class="hljs-keyword">new</span> <span class="hljs-variable constant_">THREE</span>.<span class="hljs-title class_">Mesh</span>(planeGeometry, planeMaterial);<br><span class="hljs-comment">// 物体移动位置</span><br>plane.<span class="hljs-property">rotation</span>.<span class="hljs-property">x</span> = -<span class="hljs-number">0.5</span> * <span class="hljs-title class_">Math</span>.<span class="hljs-property">PI</span>;<br>plane.<span class="hljs-property">position</span>.<span class="hljs-property">x</span> = <span class="hljs-number">15</span>;<br>plane.<span class="hljs-property">position</span>.<span class="hljs-property">y</span> = <span class="hljs-number">0</span>;<br>plane.<span class="hljs-property">position</span>.<span class="hljs-property">z</span> = <span class="hljs-number">0</span>;<br><span class="hljs-comment">// 将地面添加到场景中</span><br>scene.<span class="hljs-title function_">add</span>(plane);<br></code></pre></td></tr></table></figure><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 将渲染器输出添加html元素中</span><br><span class="hljs-variable language_">document</span>.<span class="hljs-title function_">getElementById</span>(<span class="hljs-string">&#x27;webgl-output&#x27;</span>).<span class="hljs-title function_">appendChild</span>(renderer.<span class="hljs-property">domElement</span>);<br>renderer.<span class="hljs-title function_">render</span>(scene, camera);<br></code></pre></td></tr></table></figure><h2 id="运行"><a href="#运行" class="headerlink" title="运行"></a>运行</h2><p><img src="/2022/03/10/%E5%AD%A6%E4%B9%A0%E4%B8%80%E4%B8%8Bthree.js%EF%BC%88%E5%85%A5%E9%97%A8%EF%BC%89/demo.png"></p><p>最最最简单的，没有添加光源，不能动实现动画效果的页面出来啦~</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>Three.js</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Vue项目使用Axios封装网络请求模块</title>
    <link href="/2022/02/23/Vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Axios%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97/"/>
    <url>/2022/02/23/Vue%E9%A1%B9%E7%9B%AE%E4%BD%BF%E7%94%A8Axios%E5%B0%81%E8%A3%85%E7%BD%91%E7%BB%9C%E8%AF%B7%E6%B1%82%E6%A8%A1%E5%9D%97/</url>
    
    <content type="html"><![CDATA[<h2 id="项目背景"><a href="#项目背景" class="headerlink" title="项目背景"></a>项目背景</h2><p>◉ Vue2<br>◉ axios<br>PS：axios是一个库，它不是一个vue的第三方插件，所以无法像其他第三方插件一样直接使用Vue.use()来安装。</p><h3 id="安装"><a href="#安装" class="headerlink" title="安装"></a>安装</h3><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript">npm install --save axios<br></code></pre></td></tr></table></figure><h3 id="使用"><a href="#使用" class="headerlink" title="使用"></a>使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> <span class="hljs-title class_">Vue</span> <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;vue&#x27;</span><br><span class="hljs-keyword">import</span> axios <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;axios&#x27;</span><br><span class="hljs-title class_">Vue</span>.<span class="hljs-title function_">use</span>(axios)<br></code></pre></td></tr></table></figure><h2 id="操作步骤"><a href="#操作步骤" class="headerlink" title="操作步骤"></a>操作步骤</h2><h3 id="1-创建一个axios实例"><a href="#1-创建一个axios实例" class="headerlink" title="1. 创建一个axios实例"></a>1. 创建一个axios实例</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> service = axios.<span class="hljs-title function_">create</span>(&#123;<br>    <span class="hljs-attr">baseURL</span>: <span class="hljs-attr">http</span>:<span class="hljs-comment">//localhost:8080, // 请求的域名、基本地址</span><br>    <span class="hljs-attr">timeout</span>: <span class="hljs-number">50000</span>, <span class="hljs-comment">// 请求超时时间</span><br>    <span class="hljs-attr">withCredentials</span>: <span class="hljs-literal">true</span> <span class="hljs-comment">// 表示每次请求可以携带 cookie 和 session</span><br>    <span class="hljs-comment">// 更多配置项可以看看官网这里不过多赘述</span><br>&#125;);<br></code></pre></td></tr></table></figure><h3 id="2-请求拦截器"><a href="#2-请求拦截器" class="headerlink" title="2. 请求拦截器"></a>2. 请求拦截器</h3><p>利用Axios的拦截器方法service.interceptors.request.use() 在 发送request请求 之前做了一些配置（当然你也可以根据项目的具体需求做一些更详细的配置）：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 请求拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">request</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function">(<span class="hljs-params">config</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 在请求发送之前做一些处理</span><br>        <span class="hljs-keyword">const</span> token = util.<span class="hljs-property">cookies</span>.<span class="hljs-title function_">get</span>(<span class="hljs-string">&#x27;token&#x27;</span>);<br>        <span class="hljs-comment">// 让每个请求携带token-- [&#x27;token&#x27;]为自定义key 请根据实际情况自行修改</span><br>        config.<span class="hljs-property">headers</span>[<span class="hljs-string">&#x27;token&#x27;</span>] = token;<br>        <span class="hljs-keyword">return</span> config;<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// 发送失败</span><br>        <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>    &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="3-响应拦截器"><a href="#3-响应拦截器" class="headerlink" title="3. 响应拦截器"></a>3. 响应拦截器</h3><p>利用Axios的拦截器方法service.interceptors.response.use 对 接收的response响应 进行判断和操作的处理：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br><span class="line">40</span><br><span class="line">41</span><br><span class="line">42</span><br><span class="line">43</span><br><span class="line">44</span><br><span class="line">45</span><br><span class="line">46</span><br><span class="line">47</span><br><span class="line">48</span><br><span class="line">49</span><br><span class="line">50</span><br><span class="line">51</span><br><span class="line">52</span><br><span class="line">53</span><br><span class="line">54</span><br><span class="line">55</span><br><span class="line">56</span><br><span class="line">57</span><br><span class="line">58</span><br><span class="line">59</span><br><span class="line">60</span><br><span class="line">61</span><br><span class="line">62</span><br><span class="line">63</span><br><span class="line">64</span><br><span class="line">65</span><br><span class="line">66</span><br><span class="line">67</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 响应拦截器</span><br>service.<span class="hljs-property">interceptors</span>.<span class="hljs-property">response</span>.<span class="hljs-title function_">use</span>(<br>    <span class="hljs-function">(<span class="hljs-params">response</span>) =&gt;</span> &#123;<br>        <span class="hljs-comment">// dataAxios 是 axios 返回数据中的 data</span><br>        <span class="hljs-keyword">const</span> dataAxios = response.<span class="hljs-property">data</span>;<br>        <span class="hljs-comment">// 这个状态码是和后端约定的</span><br>        <span class="hljs-keyword">const</span> &#123; code &#125; = dataAxios;<br>        <span class="hljs-comment">// 根据 code 进行判断</span><br>        <span class="hljs-keyword">if</span> (code === <span class="hljs-literal">undefined</span>) &#123;<br>            <span class="hljs-comment">// 如果没有 code 代表这不是项目后端开发的接口</span><br>            <span class="hljs-keyword">return</span> dataAxios;<br>        &#125; <span class="hljs-keyword">else</span> &#123;<br>            <span class="hljs-comment">// 有 code 代表这是一个后端接口 可以进行进一步的判断</span><br>            <span class="hljs-keyword">switch</span> (code) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">200</span>:<br>                <span class="hljs-comment">// [ 示例 ] code === 200 代表没有错误</span><br>                <span class="hljs-keyword">return</span> dataAxios.<span class="hljs-property">data</span>;<br>            <span class="hljs-attr">default</span>:<br>                <span class="hljs-comment">// 不是正确的 code</span><br>                <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(dataAxios);<br>            &#125;<br>        &#125;<br>    &#125;,<br>    <span class="hljs-function">(<span class="hljs-params">error</span>) =&gt;</span> &#123;<br>        <span class="hljs-keyword">if</span> (error &amp;&amp; error.<span class="hljs-property">response</span>) &#123;<br>            <span class="hljs-keyword">switch</span> (error.<span class="hljs-property">response</span>.<span class="hljs-property">status</span>) &#123;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">400</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;请求错误&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">401</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;未授权，请登录&#x27;</span>;<br>                store.<span class="hljs-title function_">dispatch</span>(<span class="hljs-string">&#x27;logout&#x27;</span>, &#123; <span class="hljs-attr">confirm</span>: <span class="hljs-literal">false</span> &#125;);<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">403</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;拒绝访问&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">404</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">`请求地址出错`</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">408</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;请求超时&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">500</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;服务器内部错误&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">501</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;服务未实现&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">502</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;网关错误&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">503</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;服务不可用&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">504</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;网关超时&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-keyword">case</span> <span class="hljs-number">505</span>:<br>                error.<span class="hljs-property">message</span> = <span class="hljs-string">&#x27;HTTP版本不受支持&#x27;</span>;<br>                <span class="hljs-keyword">break</span>;<br>            <span class="hljs-attr">default</span>:<br>                <span class="hljs-keyword">break</span>;<br>            &#125;<br>        &#125;<br>        <span class="hljs-keyword">return</span> <span class="hljs-title class_">Promise</span>.<span class="hljs-title function_">reject</span>(error);<br>    &#125;<br>);<br></code></pre></td></tr></table></figure><h3 id="4-最后导出模块"><a href="#4-最后导出模块" class="headerlink" title="4. 最后导出模块"></a>4. 最后导出模块</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> service;<br></code></pre></td></tr></table></figure><h3 id="5-在-src-目录下添加-api-文件夹后创建-xxx-js"><a href="#5-在-src-目录下添加-api-文件夹后创建-xxx-js" class="headerlink" title="5. 在 src 目录下添加 api 文件夹后创建 xxx.js"></a>5. 在 src 目录下添加 api 文件夹后创建 xxx.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> request <span class="hljs-keyword">from</span> <span class="hljs-string">&#x27;...&#x27;</span>;<br><br><span class="hljs-comment">// 登录接口</span><br><span class="hljs-keyword">export</span> <span class="hljs-keyword">function</span> <span class="hljs-title function_">Login</span> (params) &#123;<br>    <span class="hljs-keyword">return</span> <span class="hljs-title function_">request</span>(&#123;<br>        <span class="hljs-attr">url</span>: <span class="hljs-string">&#x27;/***/***&#x27;</span>,<br>        <span class="hljs-attr">method</span>: <span class="hljs-string">&#x27;get&#x27;</span>,<br>        params<br>    &#125;);<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="6-使用"><a href="#6-使用" class="headerlink" title="6. 使用"></a>6. 使用</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">import</span> &#123; <span class="hljs-title class_">Login</span> &#125; <span class="hljs-keyword">from</span> <span class="hljs-string">&quot;@/api/api&quot;</span>;<br><span class="hljs-keyword">export</span> <span class="hljs-keyword">default</span> &#123;<br>    <span class="hljs-attr">methods</span>: &#123;<br>        <span class="hljs-title function_">toLogin</span>(<span class="hljs-params"></span>)&#123;<br>            <span class="hljs-title class_">Login</span>( *** ).<span class="hljs-title function_">then</span>(<span class="hljs-function">(<span class="hljs-params"> response </span>) =&gt;</span> &#123;<br>                <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>( response );<br>            &#125;);<br>        &#125;<br>    &#125;,<br>&#125;<br><br></code></pre></td></tr></table></figure><h2 id="最后"><a href="#最后" class="headerlink" title="最后"></a>最后</h2><p>可以根据自己的项目需求操作，具体操作就仁者见仁智者见智了。 如果更多需求，或者是不一样的需求，可以根据自己的需求进行修改。若文章有错误内容，欢迎指点讨论！</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>vue</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>TypeScript从入门到精（fang）通（qi）</title>
    <link href="/2022/02/21/TypeScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%EF%BC%88fang%EF%BC%89%E9%80%9A%EF%BC%88qi%EF%BC%89/"/>
    <url>/2022/02/21/TypeScript%E4%BB%8E%E5%85%A5%E9%97%A8%E5%88%B0%E7%B2%BE%EF%BC%88fang%EF%BC%89%E9%80%9A%EF%BC%88qi%EF%BC%89/</url>
    
    <content type="html"><![CDATA[<h2 id="一、TypeScript简介"><a href="#一、TypeScript简介" class="headerlink" title="一、TypeScript简介"></a>一、TypeScript简介</h2><p>◉ TypeScript是JavaScript的超集。<br>◉ 它对JS进行了扩展，向JS中引入了类型的概念，并添加了许多新的特性。TS代码需要通过编译器编译为JS，然后再交由JS解析器执行。<br>◉ TS完全兼容JS，换言之，任何的JS代码都可以直接当成JS使用。<br>◉ 相较于JS而言，TS拥有了静态类型，更加严格的语法，更强大的功能；TS可以在代码执行前就完成代码的检查，减小了运行时异常的出现的几率；TS代码可以编译为任意版本的JS代码，可有效解决不同JS运行◉ 环境的兼容问题；同样的功能，TS的代码量要大于JS，但由于TS的代码结构更加清晰，变量类型更加明确，在后期代码的维护中TS却远远胜于JS。</p><h2 id="二、TypeScript开发环境搭建"><a href="#二、TypeScript开发环境搭建" class="headerlink" title="二、TypeScript开发环境搭建"></a>二、TypeScript开发环境搭建</h2><h3 id="下载Node-js"><a href="#下载Node-js" class="headerlink" title="下载Node.js"></a>下载Node.js</h3><p>◉ 64位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x64.msi</a><br>◉ 32位：<a href="https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi">https://nodejs.org/dist/v14.15.1/node-v14.15.1-x86.msi</a></p><h3 id="安装Node-js"><a href="#安装Node-js" class="headerlink" title="安装Node.js"></a>安装Node.js</h3><h3 id="使用npm全局安装typescript"><a href="#使用npm全局安装typescript" class="headerlink" title="使用npm全局安装typescript"></a>使用npm全局安装typescript</h3><p>（1）进入命令行<br>（2）输入：npm i -g typescript</p><h3 id="创建一个ts文件"><a href="#创建一个ts文件" class="headerlink" title="创建一个ts文件"></a>创建一个ts文件</h3><h3 id="使用tsc对ts文件进行编译"><a href="#使用tsc对ts文件进行编译" class="headerlink" title="使用tsc对ts文件进行编译"></a>使用tsc对ts文件进行编译</h3><p>（1）进入命令行<br>（2）进入ts文件所在目录<br>（3）执行命令：tsc xxx.ts</p><h2 id="三、基本类型"><a href="#三、基本类型" class="headerlink" title="三、基本类型"></a>三、基本类型</h2><p>类型声明是TS非常重要的一个特点，通过类型声明可以指定TS中变量（参数、形参）的类型。指定类型后，当为变量赋值时，TS编译器会自动检查值是否符合类型声明，符合则赋值，否则报错，简而言之，类型声明给变量设置了类型，使得变量只能存储某种类型的值。</p><h3 id="语法"><a href="#语法" class="headerlink" title="语法"></a>语法</h3><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> 变量: 类型;<br><span class="hljs-keyword">let</span> 变量: 类型 = 值;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">fn</span>(<span class="hljs-params">参数: 类型, 参数: 类型</span>): 类型 &#123;<br>    ...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="自动类型判断"><a href="#自动类型判断" class="headerlink" title="自动类型判断"></a>自动类型判断</h3><p>◉ TS拥有自动的类型判断机制<br>◉ 当对变量的声明和赋值是同时进行的，TS编译器会自动判断变量的类型<br>◉ 所以如果你的变量的声明和赋值时同时进行的，可以省略掉类型声明</p><h3 id="类型"><a href="#类型" class="headerlink" title="类型"></a>类型</h3><table><thead><tr><th>类型</th><th>例子</th><th>描述</th></tr></thead><tbody><tr><td>number</td><td>1,-33,2.5</td><td>任意数字</td></tr><tr><td>string</td><td>‘hi’,”hi”,<code>hi</code></td><td>任意字符串</td></tr><tr><td>boolean</td><td>true、false</td><td>布尔值true或false</td></tr><tr><td>字面量</td><td>其本身</td><td>限制变量的值就是该字面量的值</td></tr><tr><td>any</td><td>*</td><td>任意类型</td></tr><tr><td>unknown</td><td>*</td><td>类型安全的any</td></tr><tr><td>void</td><td>空值（undefined）</td><td>没有值（或undefined）</td></tr><tr><td>never</td><td>没有值</td><td>不能是任何值</td></tr><tr><td>object</td><td>{name: ‘孙悟空’}</td><td>任意的JS对象</td></tr><tr><td>array</td><td>[1,2,3]</td><td>任意JS数组</td></tr><tr><td>tuple</td><td>[4,5]</td><td>元素，TS新增类型，固定长度数组</td></tr><tr><td>enum</td><td>enum{A,B}</td><td>枚举，TS中新增类型</td></tr></tbody></table><h3 id="number"><a href="#number" class="headerlink" title="number"></a>number</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: number = <span class="hljs-number">123</span>;<br>num = <span class="hljs-string">&#x27;123&#x27;</span>; <span class="hljs-comment">// 会报错，因为声明了num为number类型的变量</span><br></code></pre></td></tr></table></figure><h3 id="boolean"><a href="#boolean" class="headerlink" title="boolean"></a>boolean</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">bool</span>: boolean = <span class="hljs-literal">false</span>;<br>bool = <span class="hljs-string">&#x27;123&#x27;</span>; <span class="hljs-comment">// 会报错，因为声明了bool为boolean类型的变量</span><br></code></pre></td></tr></table></figure><h3 id="字面量"><a href="#字面量" class="headerlink" title="字面量"></a>字面量</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">a</span>: <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">10</span>;<br>a = <span class="hljs-number">11</span>; <span class="hljs-comment">// 会报错，因为指定了类型就是10，就不能修改了</span><br></code></pre></td></tr></table></figure><h3 id="any"><a href="#any" class="headerlink" title="any"></a>any</h3><p>话说刚开始写ts的时候，各种不习惯，然后各种写any，很显然这个确实不太合理。any类型我们可以单纯的理解为就是原生js中的变量，是一种非常松散的类型，如果声明了该类型，那么这个变量可以赋值为任意值。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">anyVar</span>: any;<br>anyVar = <span class="hljs-string">&#x27;str&#x27;</span>;<br>anyVar = <span class="hljs-number">123</span>;<br>anyVar = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 以上方式都是合法的</span><br></code></pre></td></tr></table></figure><p>声明变量如果不指定类型，ts解析器会自动判断变量的类型为any（隐式的any）。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> d;<br>d = <span class="hljs-string">&#x27;str&#x27;</span>;<br>d = <span class="hljs-number">123</span>;<br>d = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 以上方式都是合法的</span><br></code></pre></td></tr></table></figure><h3 id="unknown"><a href="#unknown" class="headerlink" title="unknown"></a>unknown</h3><p>表示未知类型。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">e</span>: unknown;<br>e = <span class="hljs-string">&#x27;str&#x27;</span>;<br>e = <span class="hljs-number">123</span>;<br>e = <span class="hljs-literal">false</span>;<br><span class="hljs-comment">// 以上方式都是合法的</span><br></code></pre></td></tr></table></figure><p>那和any有什么区别呢？any可以赋值给任意变量，但unknown类型的变量赋值给其他变量时，就会报错。</p><h3 id="void"><a href="#void" class="headerlink" title="void"></a>void</h3><p>Void类型可以说是与Any相反的一个类型用来表示没有任何类型，一般我们在日常开发中，一般用于函数是否存在返回值：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: number[] = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">4</span>];<br><span class="hljs-keyword">let</span> <span class="hljs-attr">num</span>: number = <span class="hljs-number">10</span>;<br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params">arr: number[], num: number</span>): <span class="hljs-keyword">void</span> &#123;<br>    <span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(arr.<span class="hljs-property">length</span> + num);<br>    <span class="hljs-keyword">return</span> arr.<span class="hljs-property">length</span> + num; <span class="hljs-comment">// 报错，test函数设置了没有返回值void，所以return语句就会报错。</span><br>&#125;<br><span class="hljs-title function_">test</span>();<br></code></pre></td></tr></table></figure><h3 id="never"><a href="#never" class="headerlink" title="never"></a>never</h3><p>Never类型表示那些永远不存在的值，never类型是那些总是会抛出异常或根本就不会有返回值的的函数表达式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">function</span> <span class="hljs-title function_">test</span>(<span class="hljs-params"></span>): never &#123;<br>    <span class="hljs-keyword">throw</span> <span class="hljs-keyword">new</span> <span class="hljs-title class_">Error</span>(<span class="hljs-string">&#x27;报错了&#x27;</span>);<br>&#125;<br><span class="hljs-title function_">test</span>();<br><br><span class="hljs-keyword">function</span> <span class="hljs-title function_">test2</span>(<span class="hljs-params"></span>):never &#123;<br>    <span class="hljs-keyword">while</span>(<span class="hljs-literal">true</span>) &#123;&#125;<br>&#125;<br><span class="hljs-title function_">test2</span>();<br></code></pre></td></tr></table></figure><h3 id="object"><a href="#object" class="headerlink" title="object"></a>object</h3><p>Object类型就是指定一个变量为object类型但是这个地方需要我们注意的是，数组也是一个对象，所以当我们声明了变量为object，给他赋值为一个数组是没有问题的：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">obj</span>: object = &#123;&#125;;  <span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: object = []; <span class="hljs-comment">// 可以</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: object = <span class="hljs-string">&#x27;2345&#x27;</span>; <span class="hljs-comment">// 报错</span><br><br><span class="hljs-comment">// 另外一种写法</span><br><span class="hljs-comment">// &#123;&#125; 用来指定对象中可以包含哪些属性</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">b</span>: &#123;<span class="hljs-attr">name</span>: string, age?: number&#125;; <span class="hljs-comment">// 在属性后面加上?表示有这个属性也行，没有这个属性也行</span><br>b = &#123;<span class="hljs-attr">name</span>: <span class="hljs-string">&#x27;孙悟空&#x27;</span>&#125;;<br></code></pre></td></tr></table></figure><h3 id="array"><a href="#array" class="headerlink" title="array"></a>array</h3><p>在TS中，数组的表示方法有两种：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// 方法1</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: <span class="hljs-title class_">Array</span>&lt;number&gt; = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>] <span class="hljs-comment">// 尖括号内部写的是该数组内部的每一项是什么类型，在这里，内部都是number类型</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-number">3</span><span class="hljs-string">&#x27;] // 报错， 因为内部定义的是number类型</span><br><span class="hljs-string">// 方法2</span><br><span class="hljs-string">let arr number[] = [1, 2, 3] // 推荐使用，因为可能在jsx语法中，尖括号这种可能会被识别成jsx语法</span><br><span class="hljs-string">arr = [1, &#x27;</span><span class="hljs-number">2</span><span class="hljs-string">&#x27;, 3&#x27;</span>] <span class="hljs-comment">// 报错， 因为内部定义的是number类型</span><br></code></pre></td></tr></table></figure><h3 id="tuple"><a href="#tuple" class="headerlink" title="tuple"></a>tuple</h3><p>元组就是固定长度的数组。我们上述说到了数组类型，但是我们如果想设置数组内部为不同类型的话，我们就可能需要用到元组类型了。元组类型允许表示一个已知元素数量和类型的数组，各元素的类型不必相同：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">arr</span>: [number, boolean, string];<br>arr = [<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;1&#x27;</span>]; <span class="hljs-comment">// 正确</span><br>arr = [<span class="hljs-string">&#x27;2&#x27;</span>, <span class="hljs-literal">true</span>, <span class="hljs-string">&#x27;234&#x27;</span>]; <span class="hljs-comment">//报错</span><br>arr = [<span class="hljs-number">1</span>, <span class="hljs-literal">false</span>, <span class="hljs-string">&#x27;1&#x27;</span>, <span class="hljs-literal">undefined</span>] <span class="hljs-comment">// 报错 </span><br></code></pre></td></tr></table></figure><p>这个时候我们可以看到声明了arr数组之后，如果内部的类型不对的话或者length不对的情况下，则会报错。</p><h3 id="enum"><a href="#enum" class="headerlink" title="enum"></a>enum</h3><p>枚举类型，通常表示一些常量的组，例如：人的性别，一年四季等；我们用关键字 enum 声明：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript">enum <span class="hljs-title class_">Sex</span> &#123;<br>    <span class="hljs-title class_">Male</span>,<br>    <span class="hljs-title class_">Female</span><br>&#125;<br><span class="hljs-keyword">let</span> <span class="hljs-attr">indexsarrol</span>: <span class="hljs-title class_">Sex</span> = <span class="hljs-title class_">Sex</span>.<span class="hljs-property">Female</span>;<br><span class="hljs-comment">// 这里indexsarrol这个变量 只能取Male/Female</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Sex</span>.<span class="hljs-property">Male</span>); <span class="hljs-comment">// 0</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(<span class="hljs-title class_">Sex</span>.<span class="hljs-property">Female</span>); <span class="hljs-comment">// 1</span><br><span class="hljs-title class_">Sex</span>.<span class="hljs-property">Male</span> = <span class="hljs-number">10</span>;<br><span class="hljs-title class_">Sex</span>.<span class="hljs-property">Female</span> <span class="hljs-comment">// 11</span><br><span class="hljs-title class_">Sex</span>[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;Male&#x27;</span>;<br><span class="hljs-title class_">Sex</span>[<span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;Female&#x27;</span>;<br></code></pre></td></tr></table></figure><p>这里我们可以看到，如果我们打印Sex.Male 是为 0 ；这个就是Sex中Male的值；如果我们设置了Male &#x3D; 10 的话，则Female 则为11，由此我们可以知道，如果前一个类型被赋值了，则下列类型的值则递增。<br>如果我们直接访问Sex[0]的话，我们会拿到Male；这让我们联想到了对象，那么这个enum是怎么实现的呢？我们可以看看：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Sex</span>;<br>(<span class="hljs-keyword">function</span>(<span class="hljs-params">Sex</span>)&#123;<br>    <span class="hljs-title class_">Sex</span>[<span class="hljs-title class_">Sex</span>[<span class="hljs-string">&#x27;Male&#x27;</span>] = <span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;Male&#x27;</span>;<br>    <span class="hljs-title class_">Sex</span>[<span class="hljs-title class_">Sex</span>[<span class="hljs-string">&#x27;Female&#x27;</span>] = <span class="hljs-number">1</span>] = <span class="hljs-string">&#x27;Female&#x27;</span>;<br>&#125;(<span class="hljs-title class_">Sex</span> || &#123;&#125;))<br></code></pre></td></tr></table></figure><p>这里其实我们可以看到 首先声明了一个对象，这里的写法可能有点同学未必能看懂，我们可以转换一下：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">var</span> <span class="hljs-title class_">Sex</span> = &#123;<br>    <span class="hljs-title class_">Male</span>: <span class="hljs-number">0</span>,<br>    <span class="hljs-title class_">Female</span>: <span class="hljs-number">1</span>,<br>    <span class="hljs-number">0</span>: <span class="hljs-string">&#x27;Male&#x27;</span>,<br>    <span class="hljs-number">1</span>: <span class="hljs-string">&#x27;Female&#x27;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>这样我们就可以看清楚了，其实就是一个对象，其内部放入了4个属性，这样也就不难理解我们之前些的一些代码了。</p><h3 id="类型断言"><a href="#类型断言" class="headerlink" title="类型断言"></a>类型断言</h3><p>有时候你会遇到这样的情况，你会比TypeScript更了解某个值的详细信息。 通常这会发生在你清楚地知道一个实体具有比它现有类型更确切的类型。<br>通过类型断言这种方式可以告诉编译器，“相信我，我知道自己在干什么”。 类型断言好比其它语言里的类型转换，但是不进行特殊的数据检查和解构。 它没有运行时的影响，只是在编译阶段起作用。 TypeScript会假设你，程序员，已经进行了必须的检查。<br>类型断言有两种形式：</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> <span class="hljs-attr">str</span>: any = <span class="hljs-string">&#x27;Indexsarrol&#x27;</span>;<br><span class="hljs-comment">// 方式1</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">len</span>: number = (&lt;string&gt;str).<span class="hljs-property">length</span>;<br><span class="hljs-comment">// 方式2</span><br><span class="hljs-keyword">let</span> <span class="hljs-attr">len</span>:number = (str <span class="hljs-keyword">as</span> string).<span class="hljs-property">length</span>; <span class="hljs-comment">// 推荐使用</span><br><span class="hljs-comment">// 其实类型断言的本质就是强制改变一个变量本身存在的类型</span><br></code></pre></td></tr></table></figure><h2 id="四、编译选项"><a href="#四、编译选项" class="headerlink" title="四、编译选项"></a>四、编译选项</h2><p>执行ts文件，先要执行tsc xxx.ts，把文件编译为js文件，再把js文件放在浏览器中执行，这样就很麻烦。我们通过编译选项，让我们编写ts变得更加优雅，就是把我们需要手动做的事，变成自动化，并且我们可以通过编译选项，对ts做一些配置，比如我希望语法有问题就不进行编译，把语法编译成es6版本等。</p><h3 id="自动编译文件"><a href="#自动编译文件" class="headerlink" title="自动编译文件"></a>自动编译文件</h3><p>编译文件时，使用 -w 指令后，TS编译器会自动监视文件的变化，并在文件发生变化时对文件进行重新编译。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs javascript">tsc xxx.<span class="hljs-property">ts</span> -w<br></code></pre></td></tr></table></figure><h3 id="自动编译整个项目"><a href="#自动编译整个项目" class="headerlink" title="自动编译整个项目"></a>自动编译整个项目</h3><p>◉ 如果直接使用tsc指令，则可以自动将当前项目下的所有ts文件编译为js文件。<br>◉ 但是能直接使用tsc命令的前提时，要先在项目根目录下创建一个ts的配置文件 tsconfig.json<br>◉ tsconfig.json是一个JSON文件，添加配置文件后，只需只需 tsc 命令即可完成对整个项目的编译<br>◉ 配置选项<br>（1）include<br>◆ 定义希望被编译文件所在的目录<br>◆ 默认值：[“**&#x2F;*”]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;include&quot;</span>:[<span class="hljs-string">&quot;src/**/*&quot;</span>, <span class="hljs-string">&quot;tests/**/*&quot;</span>]<br><span class="hljs-comment">// 上述示例中，所有src目录和tests目录下的文件都会被编译</span><br></code></pre></td></tr></table></figure><p>（2）exclude<br>◆ 定义需要排除在外的目录<br>◆ 默认值：[“node_modules”, “bower_components”, “jspm_packages”]</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;exclude&quot;</span>: [<span class="hljs-string">&quot;./src/hello/**/*&quot;</span>]<br><span class="hljs-comment">// 上述示例中，src下hello目录下的文件都不会被编译</span><br></code></pre></td></tr></table></figure><p>（3）extends<br>◆ 定义被继承的配置文件</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;extends&quot;</span>: <span class="hljs-string">&quot;./configs/base&quot;</span><br><span class="hljs-comment">// 上述示例中，当前配置文件中会自动包含config目录下base.json中的所有配置信息</span><br></code></pre></td></tr></table></figure><p>（4）files<br>◆ 指定被编译文件的列表，只有需要编译的文件少时才会用到</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;files&quot;</span>: [<br>    <span class="hljs-string">&quot;core.ts&quot;</span>,<br>    <span class="hljs-string">&quot;sys.ts&quot;</span>,<br>    <span class="hljs-string">&quot;types.ts&quot;</span>,<br>    <span class="hljs-string">&quot;scanner.ts&quot;</span>,<br>    <span class="hljs-string">&quot;parser.ts&quot;</span>,<br>    <span class="hljs-string">&quot;utilities.ts&quot;</span>,<br>    <span class="hljs-string">&quot;binder.ts&quot;</span>,<br>    <span class="hljs-string">&quot;checker.ts&quot;</span>,<br>    <span class="hljs-string">&quot;tsc.ts&quot;</span><br>]<br><span class="hljs-comment">// 列表中的文件都会被TS编译器所编译</span><br></code></pre></td></tr></table></figure><p>（5）compilerOptions<br>◆ 编译选项是配置文件中非常重要也比较复杂的配置选项<br>◆ 在compilerOptions中包含多个子选项，用来完成对编译的配置<br>（5.1）target<br>设置ts代码编译的目标版本<br>可选值：ES3（默认）、ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span> <span class="hljs-comment">// 我们所编写的ts代码将会被编译为ES6版本的js代码</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（5.2）module<br>设置编译后代码使用的模块化系统<br>可选值：CommonJS、UMD、AMD、System、ES2020、ESNext、None</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;CommonJS&quot;</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（5.3）lib<br>指定代码运行时所包含的库（宿主环境）<br>可选值：ES5、ES6&#x2F;ES2015、ES7&#x2F;ES2016、ES2017、ES2018、ES2019、ES2020、ESNext、DOM、WebWorker、ScriptHost ……</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES6&quot;</span>,<br>    <span class="hljs-string">&quot;lib&quot;</span>: [<span class="hljs-string">&quot;ES6&quot;</span>, <span class="hljs-string">&quot;DOM&quot;</span>],<br>    <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span>,<br>    <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/aa.js&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure><p>（5.4）outDir<br>编译后文件的所在目录<br>默认情况下，编译后的js文件会和ts文件位于相同的目录，设置outDir后可以改变编译后文件的位置</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outDir&quot;</span>: <span class="hljs-string">&quot;dist&quot;</span> <span class="hljs-comment">// 设置后编译后的js文件将会生成到dist目录</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（5.5）outFile<br>将所有的文件编译为一个js文件<br>默认会将所有的编写在全局作用域中的代码合并为一个js文件，如果module制定了None、System或AMD则会将模块一起合并到文件之中</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;outFile&quot;</span>: <span class="hljs-string">&quot;dist/aa.js&quot;</span><br> &#125;<br></code></pre></td></tr></table></figure><p>（5.6）allowJs<br>是否对js文件编译，默认是false<br>（5.7）checkJs<br>是否对js文件进行检查</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-string">&quot;compilerOptions&quot;</span>: &#123;<br>    <span class="hljs-string">&quot;allowJs&quot;</span>: <span class="hljs-literal">true</span>,<br>    <span class="hljs-string">&quot;checkJs&quot;</span>: <span class="hljs-literal">true</span><br>&#125;<br></code></pre></td></tr></table></figure><p>（5.8）removeComments<br>是否删除注释，默认值：false<br>（5.9）noEmit<br>不对代码进行编译，默认值：false<br>（5.10）noEmitOnError<br>当有错误时，不生成编译后的文件<br>（5.11）strict<br>启用所有的严格检查，默认值为true，设置后相当于开启了所有的严格检查<br>（5.12）alwaysStrict<br>总是以严格模式对代码进行编译<br>（5.13）noImplicitAny<br>禁止隐式的any类型<br>（5.14）noImplicitThis<br>禁止类型不明确的this<br>（5.15）strictBindCallApply<br>严格检查bind、call和apply的参数列表<br>（5.16）strictFunctionTypes<br>严格检查函数的类型<br>（5.17）strictNullChecks<br>严格的空值检查<br>（5.18）strictPropertyInitialization<br>严格检查属性是否初始化</p><h2 id="五、webpack"><a href="#五、webpack" class="headerlink" title="五、webpack"></a>五、webpack</h2><p>通常情况下，实际开发中我们都需要使用构建工具对代码进行打包，TS同样也可以结合构建工具一起使用，下边以webpack为例介绍一下如何结合构建工具使用TS。<br>步骤：</p><h3 id="初始化项目"><a href="#初始化项目" class="headerlink" title="初始化项目"></a>初始化项目</h3><p>进入项目根目录，执行命令 npm init -y<br>主要作用：创建package.json文件</p><h3 id="下载构建工具"><a href="#下载构建工具" class="headerlink" title="下载构建工具"></a>下载构建工具</h3><p>npm i -D webpack webpack-cli webpack-dev-server typescript ts-loader clean-webpack-plugin<br>共安装了7个包：<br>webpack：构建工具webpack<br>webpack-cli：webpack的命令行工具<br>webpack-dev-server：webpack的开发服务器<br>typescript：ts编译器<br>ts-loader：ts加载器，用于在webpack中编译ts文件<br>html-webpack-plugin：webpack中html插件，用来自动创建html文件<br>clean-webpack-plugin：webpack中的清除插件，每次构建都会先清除目录</p><h3 id="根目录下创建webpack的配置文件webpack-config-js"><a href="#根目录下创建webpack的配置文件webpack-config-js" class="headerlink" title="根目录下创建webpack的配置文件webpack.config.js"></a>根目录下创建webpack的配置文件webpack.config.js</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br><span class="line">34</span><br><span class="line">35</span><br><span class="line">36</span><br><span class="line">37</span><br><span class="line">38</span><br><span class="line">39</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">const</span> path = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;path&quot;</span>);<br><span class="hljs-keyword">const</span> <span class="hljs-title class_">HtmlWebpackPlugin</span> = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;html-webpack-plugin&quot;</span>);<br><span class="hljs-keyword">const</span> &#123; <span class="hljs-title class_">CleanWebpackPlugin</span> &#125; = <span class="hljs-built_in">require</span>(<span class="hljs-string">&quot;clean-webpack-plugin&quot;</span>);<br><span class="hljs-variable language_">module</span>.<span class="hljs-property">exports</span> = &#123;<br>    <span class="hljs-attr">optimization</span>:&#123;<br>        <span class="hljs-attr">minimize</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 关闭代码压缩，可选</span><br>    &#125;,<br>    <span class="hljs-attr">entry</span>: <span class="hljs-string">&quot;./src/index.ts&quot;</span>, <span class="hljs-comment">// 指定入口文件</span><br>    <span class="hljs-attr">devtool</span>: <span class="hljs-string">&quot;inline-source-map&quot;</span>,<br>    <span class="hljs-attr">devServer</span>: &#123;<br>        <span class="hljs-attr">contentBase</span>: <span class="hljs-string">&#x27;./dist&#x27;</span><br>    &#125;,<br>    <span class="hljs-attr">output</span>: &#123;<br>        <span class="hljs-attr">path</span>: path.<span class="hljs-title function_">resolve</span>(__dirname, <span class="hljs-string">&quot;dist&quot;</span>), <span class="hljs-comment">// 指定打包文件的目录</span><br>        <span class="hljs-attr">filename</span>: <span class="hljs-string">&quot;bundle.js&quot;</span>, <span class="hljs-comment">// 打包后文件的文件名</span><br>        <span class="hljs-attr">environment</span>: &#123;<br>            <span class="hljs-attr">arrowFunction</span>: <span class="hljs-literal">false</span> <span class="hljs-comment">// 关闭webpack的箭头函数，可选</span><br>        &#125;<br>    &#125;,<br>    <span class="hljs-attr">resolve</span>: &#123;<br>        <span class="hljs-attr">extensions</span>: [<span class="hljs-string">&quot;.ts&quot;</span>, <span class="hljs-string">&quot;.js&quot;</span>] <span class="hljs-comment">// 用来设置引用模块</span><br>    &#125;,<br>    <span class="hljs-attr">module</span>: &#123;<br>        <span class="hljs-attr">rules</span>: [&#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>            <span class="hljs-attr">use</span>: &#123;<br>                <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;ts-loader&quot;</span><br>            &#125;,<br>            <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>        &#125;]<br>    &#125;,<br>    <span class="hljs-comment">// 配置webpack插件</span><br>    <span class="hljs-attr">plugins</span>: [<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">CleanWebpackPlugin</span>(),<br>        <span class="hljs-keyword">new</span> <span class="hljs-title class_">HtmlWebpackPlugin</span>(&#123;<br>            <span class="hljs-attr">title</span>:<span class="hljs-string">&#x27;TS测试&#x27;</span><br>        &#125;),<br>    ]<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="根目录下创建tsconfig-json，配置可以根据自己需要"><a href="#根目录下创建tsconfig-json，配置可以根据自己需要" class="headerlink" title="根目录下创建tsconfig.json，配置可以根据自己需要"></a>根目录下创建tsconfig.json，配置可以根据自己需要</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    <span class="hljs-string">&quot;compilerOptions&quot;</span>:&#123;<br>        <span class="hljs-string">&quot;target&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>        <span class="hljs-string">&quot;module&quot;</span>: <span class="hljs-string">&quot;ES2015&quot;</span>,<br>        <span class="hljs-string">&quot;strict&quot;</span>: <span class="hljs-literal">true</span><br>    &#125;<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="修改package-json添加如下配置"><a href="#修改package-json添加如下配置" class="headerlink" title="修改package.json添加如下配置"></a>修改package.json添加如下配置</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br></pre></td><td class="code"><pre><code class="hljs javascript">&#123;<br>    ...略...<br>    <span class="hljs-string">&quot;scripts&quot;</span>: &#123;<br>        <span class="hljs-string">&quot;test&quot;</span>: <span class="hljs-string">&quot;echo \&quot;Error: no test specified\&quot; &amp;&amp; exit 1&quot;</span>,<br>        <span class="hljs-string">&quot;build&quot;</span>: <span class="hljs-string">&quot;webpack&quot;</span>,<br>        <span class="hljs-string">&quot;start&quot;</span>: <span class="hljs-string">&quot;webpack serve --open chrome.exe&quot;</span><br>    &#125;,<br>    ...略...<br>&#125;<br></code></pre></td></tr></table></figure><h3 id="在src下创建ts文件，并在并命令行执行npm-run-build对代码进行编译，或者执行npm-start来启动开发服务器"><a href="#在src下创建ts文件，并在并命令行执行npm-run-build对代码进行编译，或者执行npm-start来启动开发服务器" class="headerlink" title="在src下创建ts文件，并在并命令行执行npm run build对代码进行编译，或者执行npm start来启动开发服务器"></a>在src下创建ts文件，并在并命令行执行npm run build对代码进行编译，或者执行npm start来启动开发服务器</h3><h2 id="六、Babel"><a href="#六、Babel" class="headerlink" title="六、Babel"></a>六、Babel</h2><p>经过一系列的配置，使得TS和webpack已经结合到了一起，除了webpack，开发中还经常需要结合babel来对代码进行转换以使其可以兼容到更多的浏览器，在上述步骤的基础上，通过以下步骤再将babel引入到项目中。</p><h3 id="安装依赖包"><a href="#安装依赖包" class="headerlink" title="安装依赖包"></a>安装依赖包</h3><p>npm i -D @babel&#x2F;core @babel&#x2F;preset-env babel-loader core-js<br>共安装了4个包，分别是：<br>@babel&#x2F;core：babel的核心工具<br>@babel&#x2F;preset-env：babel的预定义环境<br>@babel-loader：babel在webpack中的加载器<br>core-js：core-js用来使老版本的浏览器支持新版ES语法</p><h3 id="修改webpack-config-js配置文件"><a href="#修改webpack-config-js配置文件" class="headerlink" title="修改webpack.config.js配置文件"></a>修改webpack.config.js配置文件</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br><span class="line">15</span><br><span class="line">16</span><br><span class="line">17</span><br><span class="line">18</span><br><span class="line">19</span><br><span class="line">20</span><br><span class="line">21</span><br><span class="line">22</span><br><span class="line">23</span><br><span class="line">24</span><br><span class="line">25</span><br><span class="line">26</span><br><span class="line">27</span><br><span class="line">28</span><br><span class="line">29</span><br><span class="line">30</span><br><span class="line">31</span><br><span class="line">32</span><br><span class="line">33</span><br></pre></td><td class="code"><pre><code class="hljs javascript">...略...<br><span class="hljs-attr">module</span>: &#123;<br>    <span class="hljs-attr">rules</span>: [<br>        &#123;<br>            <span class="hljs-attr">test</span>: <span class="hljs-regexp">/\.ts$/</span>,<br>            <span class="hljs-attr">use</span>: [<br>                &#123;<br>                    <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;babel-loader&quot;</span>,<br>                    <span class="hljs-attr">options</span>:&#123;<br>                        <span class="hljs-attr">presets</span>: [<br>                            [<br>                                <span class="hljs-string">&quot;@babel/preset-env&quot;</span>,<br>                                &#123;<br>                                    <span class="hljs-string">&quot;targets&quot;</span>:&#123;<br>                                        <span class="hljs-string">&quot;chrome&quot;</span>: <span class="hljs-string">&quot;58&quot;</span>,<br>                                        <span class="hljs-string">&quot;ie&quot;</span>: <span class="hljs-string">&quot;11&quot;</span><br>                                    &#125;,<br>                                    <span class="hljs-string">&quot;corejs&quot;</span>:<span class="hljs-string">&quot;3&quot;</span>,<br>                                    <span class="hljs-string">&quot;useBuiltIns&quot;</span>: <span class="hljs-string">&quot;usage&quot;</span><br>                                &#125;<br>                            ]<br>                        ]<br>                    &#125;<br>                &#125;,<br>                &#123;<br>                    <span class="hljs-attr">loader</span>: <span class="hljs-string">&quot;ts-loader&quot;</span>,<br>                &#125;<br>            ],<br>            <span class="hljs-attr">exclude</span>: <span class="hljs-regexp">/node_modules/</span><br>        &#125;<br>    ]<br>&#125;<br>...略...<br></code></pre></td></tr></table></figure><p>如此一来，使用ts编译后的文件将会再次被babel处理，使得代码可以在大部分浏览器中直接使用，可以在配置选项的targets中指定要兼容的浏览器版本。</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>TypeScript</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>js 数组详细操作方法及解析合集</title>
    <link href="/2022/02/21/js%20%E6%95%B0%E7%BB%84%E8%AF%A6%E7%BB%86%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E5%8F%8A%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86/"/>
    <url>/2022/02/21/js%20%E6%95%B0%E7%BB%84%E8%AF%A6%E7%BB%86%E6%93%8D%E4%BD%9C%E6%96%B9%E6%B3%95%E5%8F%8A%E8%A7%A3%E6%9E%90%E5%90%88%E9%9B%86/</url>
    
    <content type="html"><![CDATA[<p>数组原型提供了非常多的方法，这里分为三类，一类会改变原数组的值，一类是不会改变原数组，以及数组的遍历方法。</p><h3 id="一、改变原数组的方法-9个"><a href="#一、改变原数组的方法-9个" class="headerlink" title="一、改变原数组的方法(9个):"></a>一、改变原数组的方法(9个):</h3><figure class="highlight javascript"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></div></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ES5</span>:<br>splice、sort、pop、shift、push、unshift、reverse<br><span class="hljs-title class_">ES6</span>:<br>copyWithin、fill<br></code></pre></td></tr></table></figure><h4 id="1-splice-添加-x2F-删除数组元素"><a href="#1-splice-添加-x2F-删除数组元素" class="headerlink" title="1. splice() 添加&#x2F;删除数组元素"></a>1. splice() 添加&#x2F;删除数组元素</h4><p>定义：splice() 方法向数组中添加&#x2F;删除项目，然后返回被删除的项目。<br>语法：array.splice(index,howmany,item1,…..,itemX)<br>参数：<br>index：必需。整数，规定添加&#x2F;删除项目的位置，使用负数可从数组结尾处规定位置。<br>howmany：可选。要删除的项目数量。如果设置为 0，则不会删除项目。<br>item1, …, itemX： 可选。向数组添加的新项目。<br>返回值: 如果有元素被删除,返回包含被删除项目的新数组。<br>eg1：删除元素</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [1,2,3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [4,5,6,7]</span><br><span class="hljs-comment">// 从数组下标0开始，删除3个元素</span><br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">splice</span>(-<span class="hljs-number">1</span>, <span class="hljs-number">3</span>); <span class="hljs-comment">// [7]</span><br><span class="hljs-comment">// 从最后一个元素开始删除3个元素，因为最后一个元素，所以只删除了7</span><br></code></pre></td></tr></table></figure><p>eg2：删除并添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;添加&#x27;</span>); <span class="hljs-comment">// [1,2,3]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [&#x27;添加&#x27;,4,5,6,7]</span><br><span class="hljs-comment">// 从数组下标0开始，删除3个元素，并添加元素&#x27;添加&#x27;</span><br> <span class="hljs-keyword">let</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> item = b.<span class="hljs-title function_">splice</span>(-<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-string">&#x27;添加1&#x27;</span>,<span class="hljs-string">&#x27;添加2&#x27;</span>); <span class="hljs-comment">// [6,7]</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// [1,2,3,4,5,&#x27;添加1&#x27;,&#x27;添加2&#x27;]</span><br><span class="hljs-comment">// 从数组最后第二个元素开始，删除3个元素，并添加两个元素&#x27;添加1&#x27;、&#x27;添加2&#x27;</span><br></code></pre></td></tr></table></figure><p>eg3：不删除只添加</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">splice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;添加1&#x27;</span>,<span class="hljs-string">&#x27;添加2&#x27;</span>); <span class="hljs-comment">// [] 没有删除元素，返回空数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [&#x27;添加1&#x27;,&#x27;添加2&#x27;,1,2,3,4,5,6,7]</span><br><span class="hljs-keyword">let</span> b = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>, <span class="hljs-number">7</span>];<br><span class="hljs-keyword">let</span> item = b.<span class="hljs-title function_">splice</span>(-<span class="hljs-number">1</span>,<span class="hljs-number">0</span>,<span class="hljs-string">&#x27;添加1&#x27;</span>,<span class="hljs-string">&#x27;添加2&#x27;</span>); <span class="hljs-comment">// [] 没有删除元素，返回空数组</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b); <span class="hljs-comment">// [1,2,3,4,5,6,&#x27;添加1&#x27;,&#x27;添加2&#x27;,7] 在最后一个元素的前面添加两个元素</span><br></code></pre></td></tr></table></figure><h4 id="2-sort-数组排序"><a href="#2-sort-数组排序" class="headerlink" title="2. sort() 数组排序"></a>2. sort() 数组排序</h4><p>定义：sort()方法对数组元素进行排序，并返回这个数组。<br>参数可选：规定排序顺序的比较函数。<br>默认情况下sort()方法没有传比较函数的话，默认按字母升序，如果不是元素不是字符串的话，会调用toString()方法将元素转化为字符串的Unicode(万国码)位点，然后再比较字符。</p><h4 id="3-pop-删除一个数组中的最后的一个元素"><a href="#3-pop-删除一个数组中的最后的一个元素" class="headerlink" title="3. pop() 删除一个数组中的最后的一个元素"></a>3. pop() 删除一个数组中的最后的一个元素</h4><p>定义：pop() 方法删除一个数组中的最后的一个元素，并且返回这个元素。<br>参数：无。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  a =  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">pop</span>();  <span class="hljs-comment">// 3</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2]</span><br></code></pre></td></tr></table></figure><h4 id="4-shift-删除数组的第一个元素"><a href="#4-shift-删除数组的第一个元素" class="headerlink" title="4. shift() 删除数组的第一个元素"></a>4. shift() 删除数组的第一个元素</h4><p>定义：shift()方法删除数组的第一个元素，并返回这个元素。<br>参数：无。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  a =  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">shift</span>();  <span class="hljs-comment">// 1</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [2,3]</span><br></code></pre></td></tr></table></figure><h4 id="5-push-向数组的末尾添加元素"><a href="#5-push-向数组的末尾添加元素" class="headerlink" title="5. push() 向数组的末尾添加元素"></a>5. push() 向数组的末尾添加元素</h4><p>定义：push() 方法可向数组的末尾添加一个或多个元素，并返回新的长度。<br>参数：item1, item2, …, itemX ,要添加到数组末尾的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  a =  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">push</span>(<span class="hljs-string">&#x27;末尾&#x27;</span>);  <span class="hljs-comment">// 4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [1,2,3,&#x27;末尾&#x27;]</span><br></code></pre></td></tr></table></figure><h4 id="6-unshift"><a href="#6-unshift" class="headerlink" title="6. unshift()"></a>6. unshift()</h4><p>定义：unshift() 方法可向数组的开头添加一个或更多元素，并返回新的长度。<br>参数：item1, item2, …, itemX ,要添加到数组开头的元素。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  a =  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br><span class="hljs-keyword">let</span> item = a.<span class="hljs-title function_">unshift</span>(<span class="hljs-string">&#x27;开头&#x27;</span>);  <span class="hljs-comment">// 4</span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [&#x27;开头&#x27;,1,2,3]</span><br></code></pre></td></tr></table></figure><h4 id="7-reverse-颠倒数组中元素的顺序"><a href="#7-reverse-颠倒数组中元素的顺序" class="headerlink" title="7. reverse() 颠倒数组中元素的顺序"></a>7. reverse() 颠倒数组中元素的顺序</h4><p>定义：reverse() 方法用于颠倒数组中元素的顺序。<br>参数：无。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span>  a =  [<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-number">3</span>];<br>a.<span class="hljs-title function_">reverse</span>();  <br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a); <span class="hljs-comment">// [3,2,1]</span><br></code></pre></td></tr></table></figure><h4 id="8-copyWithin-指定位置的成员复制到其他位置"><a href="#8-copyWithin-指定位置的成员复制到其他位置" class="headerlink" title="8. copyWithin() 指定位置的成员复制到其他位置"></a>8. copyWithin() 指定位置的成员复制到其他位置</h4><p>定义：在当前数组内部，将指定位置的成员复制到其他位置,并返回这个数组。<br>语法：array.copyWithin(target, start &#x3D; 0, end &#x3D; this.length)<br>参数：<br>target：必需。从该位置开始替换数据。如果为负值，表示倒数。<br>start：可选。从该位置开始读取数据，默认为 0。如果为负值，表示倒数。<br>end：可选。到该位置前停止读取数据，默认等于数组长度。使用负数可从数组结尾处规定位置。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-comment">// -2相当于3号位，-1相当于4号位</span><br>[<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>, <span class="hljs-number">4</span>, <span class="hljs-number">5</span>].<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">0</span>, -<span class="hljs-number">2</span>, -<span class="hljs-number">1</span>)<br><span class="hljs-comment">// [4, 2, 3, 4, 5]</span><br><span class="hljs-keyword">var</span> a = [<span class="hljs-string">&#x27;OB1&#x27;</span>,<span class="hljs-string">&#x27;Koro1&#x27;</span>,<span class="hljs-string">&#x27;OB2&#x27;</span>,<span class="hljs-string">&#x27;Koro2&#x27;</span>,<span class="hljs-string">&#x27;OB3&#x27;</span>,<span class="hljs-string">&#x27;Koro3&#x27;</span>,<span class="hljs-string">&#x27;OB4&#x27;</span>,<span class="hljs-string">&#x27;Koro4&#x27;</span>,<span class="hljs-string">&#x27;OB5&#x27;</span>,<span class="hljs-string">&#x27;Koro5&#x27;</span>]<br><span class="hljs-comment">// 2位置开始被替换,3位置开始读取要替换的 5位置前面停止替换</span><br>a.<span class="hljs-title function_">copyWithin</span>(<span class="hljs-number">2</span>,<span class="hljs-number">3</span>,<span class="hljs-number">5</span>)<br><span class="hljs-comment">// [&quot;OB1&quot;,&quot;Koro1&quot;,&quot;Koro2&quot;,&quot;OB3&quot;,&quot;OB3&quot;,&quot;Koro3&quot;,&quot;OB4&quot;,&quot;Koro4&quot;,&quot;OB5&quot;,&quot;Koro5&quot;] </span><br></code></pre></td></tr></table></figure><h4 id="9-fill-填充数组"><a href="#9-fill-填充数组" class="headerlink" title="9. fill() 填充数组"></a>9. fill() 填充数组</h4><p>定义：使用给定值，填充一个数组。<br>参数：<br>第一个元素：必需。要填充数组的值。<br>第二个元素：可选。填充的开始位置,默认值为0。<br>第三个元素：可选。填充的结束位置，默认是为this.length。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript">[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">7</span>)<br><span class="hljs-comment">// [7, 7, 7]</span><br>[<span class="hljs-string">&#x27;a&#x27;</span>, <span class="hljs-string">&#x27;b&#x27;</span>, <span class="hljs-string">&#x27;c&#x27;</span>].<span class="hljs-title function_">fill</span>(<span class="hljs-number">7</span>, <span class="hljs-number">1</span>, <span class="hljs-number">2</span>)<br><span class="hljs-comment">// [&#x27;a&#x27;, 7, &#x27;c&#x27;]</span><br></code></pre></td></tr></table></figure><h3 id="二、不改变原数组的方法-8个"><a href="#二、不改变原数组的方法-8个" class="headerlink" title="二、不改变原数组的方法(8个):"></a>二、不改变原数组的方法(8个):</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ES5</span>：<br>slice、join、toLocateString、toStrigin、concat、indexOf、lastIndexOf、<br><span class="hljs-title class_">ES7</span>：<br>includes<br></code></pre></td></tr></table></figure><h4 id="1-slice-浅拷贝数组的元素"><a href="#1-slice-浅拷贝数组的元素" class="headerlink" title="1. slice() 浅拷贝数组的元素"></a>1. slice() 浅拷贝数组的元素</h4><p>定义：方法返回一个从开始到结束（不包括结束）选择的数组的一部分浅拷贝到一个新数组对象，且原数组不会被修改。<br>注意：字符串也有一个slice() 方法是用来提取字符串的，不要弄混了。<br>语法：array.slice(begin, end)<br>参数：<br>begin：可选。索引数值,接受负值，从该索引处开始提取原数组中的元素,默认值为0。<br>end：可选。索引数值(不包括),接受负值，在该索引处前结束提取原数组元素，默认值为数组末尾(包括最后一个元素)。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>];<br><span class="hljs-keyword">let</span> b = a.<span class="hljs-title function_">slice</span>(<span class="hljs-number">0</span>,<span class="hljs-number">1</span>); <span class="hljs-comment">// [&#x27;hello&#x27;]</span><br>a[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;改变原数组&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b); <span class="hljs-comment">// [&#x27;改变原数组&#x27;,&#x27;world&#x27;] [&#x27;hello&#x27;]</span><br>b[<span class="hljs-number">0</span>] = <span class="hljs-string">&#x27;改变拷贝的数组&#x27;</span>;<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a,b); <span class="hljs-comment">// [&#x27;改变原数组&#x27;,&#x27;world&#x27;] [&#x27;改变拷贝的数组&#x27;]</span><br></code></pre></td></tr></table></figure><p>如上：新数组是浅拷贝的，元素是简单数据类型，改变之后不会互相干扰。<br>如果是复杂数据类型(对象,数组)的话，改变其中一个，另外一个也会改变。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;OBKoro1&#x27;</span>&#125;];<br><span class="hljs-keyword">let</span> b = a.<span class="hljs-title function_">slice</span>();<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(b,a); <span class="hljs-comment">// [&#123;&quot;name&quot;:&quot;OBKoro1&quot;&#125;]  [&#123;&quot;name&quot;:&quot;OBKoro1&quot;&#125;]</span><br><span class="hljs-comment">// a[0].name = &#x27;改变原数组&#x27;;</span><br><span class="hljs-comment">// console.log(b,a); // [&#123;&quot;name&quot;:&quot;改变原数组&quot;&#125;] [&#123;&quot;name&quot;:&quot;改变原数组&quot;&#125;]</span><br><span class="hljs-comment">// b[0].name = &#x27;改变拷贝数组&#x27;,b[0].koro=&#x27;改变拷贝数组&#x27;;</span><br><span class="hljs-comment">//  [&#123;&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;koro&quot;:&quot;改变拷贝数组&quot;&#125;] [&#123;&quot;name&quot;:&quot;改变拷贝数组&quot;,&quot;koro&quot;:&quot;改变拷贝数组&quot;&#125;]</span><br></code></pre></td></tr></table></figure><h4 id="2-join-数组转字符串"><a href="#2-join-数组转字符串" class="headerlink" title="2. join() 数组转字符串"></a>2. join() 数组转字符串</h4><p>定义：join() 方法用于把数组中的所有元素通过指定的分隔符进行分隔放入一个字符串，返回生成的字符串。<br>语法：array.join(str)<br>参数:<br>str：可选。指定要使用的分隔符，默认使用逗号作为分隔符。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;hello&#x27;</span>,<span class="hljs-string">&#x27;world&#x27;</span>];<br><span class="hljs-keyword">let</span> str = a.<span class="hljs-title function_">join</span>(); <span class="hljs-comment">// &#x27;hello,world&#x27;</span><br><span class="hljs-keyword">let</span> str2 = a.<span class="hljs-title function_">join</span>(<span class="hljs-string">&#x27;+&#x27;</span>); <span class="hljs-comment">// &#x27;hello+world&#x27;</span><br></code></pre></td></tr></table></figure><p>使用join方法或者下文说到的toString方法时，当数组中的元素也是数组或者是对象时会出现什么情况？</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [[<span class="hljs-string">&#x27;OBKoro1&#x27;</span>,<span class="hljs-string">&#x27;23&#x27;</span>],<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-keyword">let</span> str1 = a.<span class="hljs-title function_">join</span>(); <span class="hljs-comment">// OBKoro1,23,test</span><br><span class="hljs-keyword">let</span> b = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;OBKoro1&#x27;</span>,<span class="hljs-attr">age</span>:<span class="hljs-string">&#x27;23&#x27;</span>&#125;,<span class="hljs-string">&#x27;test&#x27;</span>];<br><span class="hljs-keyword">let</span> str2 = b.<span class="hljs-title function_">join</span>(); <span class="hljs-comment">// [object Object],test</span><br><span class="hljs-comment">// 对象转字符串推荐JSON.stringify(obj);</span><br></code></pre></td></tr></table></figure><p>所以，join()&#x2F;toString()方法在数组元素是数组的时候，会将里面的数组也调用join()&#x2F;toString(),如果是对象的话，对象会被转为[object Object]字符串。       </p><h4 id="3-toLocaleString-数组转字符串"><a href="#3-toLocaleString-数组转字符串" class="headerlink" title="3. toLocaleString() 数组转字符串"></a>3. toLocaleString() 数组转字符串</h4><p>定义：返回一个表示数组元素的字符串。该字符串由数组中的每个元素的 toLocaleString() 返回值经调用 join() 方法连接（由逗号隔开）组成。<br>语法：array.toLocaleString()<br>参数：无。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [&#123;<span class="hljs-attr">name</span>:<span class="hljs-string">&#x27;OBKoro1&#x27;</span>&#125;,<span class="hljs-number">23</span>,<span class="hljs-string">&#x27;abcd&#x27;</span>,<span class="hljs-keyword">new</span> <span class="hljs-title class_">Date</span>()];<br><span class="hljs-keyword">let</span> str = a.<span class="hljs-title function_">toLocaleString</span>(); <span class="hljs-comment">// [object Object],23,abcd,2018/5/28 下午1:52:20 </span><br></code></pre></td></tr></table></figure><p>如上述例子：调用数组的toLocaleString方法，数组中的每个元素都会调用自身的toLocaleString方法，对象调用对象的toLocaleString,Date调用Date的toLocaleString。</p><h4 id="4-toString-数组转字符串-不推荐"><a href="#4-toString-数组转字符串-不推荐" class="headerlink" title="4. toString() 数组转字符串 不推荐"></a>4. toString() 数组转字符串 不推荐</h4><p>定义：toString() 方法可把数组转换为由逗号链接起来的字符串。<br>语法：array.toString()<br>参数：无。<br>该方法的效果和join方法一样，都是用于数组转字符串的，但是与join方法相比没有优势，也不能自定义字符串的分隔符，因此不推荐使用。<br>值得注意的是：当数组和字符串操作的时候，js 会调用这个方法将数组自动转换成字符串。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> b = [ <span class="hljs-string">&#x27;toString&#x27;</span>,<span class="hljs-string">&#x27;演示&#x27;</span>].<span class="hljs-title function_">toString</span>(); <span class="hljs-comment">// toString,演示</span><br><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;调用toString&#x27;</span>,<span class="hljs-string">&#x27;连接在我后面&#x27;</span>]+<span class="hljs-string">&#x27;啦啦啦&#x27;</span>; <span class="hljs-comment">// 调用toString,连接在我后面啦啦啦</span><br></code></pre></td></tr></table></figure><h4 id="5-concat"><a href="#5-concat" class="headerlink" title="5. concat"></a>5. concat</h4><p>定义：方法用于合并两个或多个数组，返回一个新数组。<br>语法：var newArr &#x3D; oldArray.concat(arrayX,arrayX,……,arrayX)<br>参数：<br>arrayX：必需。该参数可以是具体的值，也可以是数组对象。可以是任意多个。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br><span class="line">6</span><br><span class="line">7</span><br><span class="line">8</span><br><span class="line">9</span><br><span class="line">10</span><br><span class="line">11</span><br><span class="line">12</span><br><span class="line">13</span><br><span class="line">14</span><br></pre></td><td class="code"><pre><code class="hljs javascript"> <span class="hljs-keyword">let</span> a = [<span class="hljs-number">1</span>, <span class="hljs-number">2</span>, <span class="hljs-number">3</span>];<br> <span class="hljs-keyword">let</span> b = [<span class="hljs-number">4</span>, <span class="hljs-number">5</span>, <span class="hljs-number">6</span>];<br> <span class="hljs-comment">//连接两个数组</span><br> <span class="hljs-keyword">let</span> newVal = a.<span class="hljs-title function_">concat</span>(b); <span class="hljs-comment">// [1,2,3,4,5,6]</span><br> <span class="hljs-comment">// 连接三个数组</span><br> <span class="hljs-keyword">let</span> c = [<span class="hljs-number">7</span>, <span class="hljs-number">8</span>, <span class="hljs-number">9</span>]<br> <span class="hljs-keyword">let</span> newVal2 = a.<span class="hljs-title function_">concat</span>(b, c); <span class="hljs-comment">// [1,2,3,4,5,6,7,8,9]</span><br> <span class="hljs-comment">// 添加元素</span><br> <span class="hljs-keyword">let</span> newVal3 = a.<span class="hljs-title function_">concat</span>(<span class="hljs-string">&#x27;添加元素&#x27;</span>,b, c,<span class="hljs-string">&#x27;再加一个&#x27;</span>); <br> <span class="hljs-comment">// [1,2,3,&quot;添加元素&quot;,4,5,6,7,8,9,&quot;再加一个&quot;]</span><br><span class="hljs-comment">// 合并嵌套数组  会浅拷贝嵌套数组</span><br> <span class="hljs-keyword">let</span> d = [<span class="hljs-number">1</span>,<span class="hljs-number">2</span> ];<br> <span class="hljs-keyword">let</span> f = [<span class="hljs-number">3</span>,[<span class="hljs-number">4</span>]];<br> <span class="hljs-keyword">let</span> newVal4 = d.<span class="hljs-title function_">concat</span>(f); <span class="hljs-comment">// [1,2,3,[4]]</span><br></code></pre></td></tr></table></figure><h4 id="6-indexOf-查找数组是否存在某个元素，返回下标"><a href="#6-indexOf-查找数组是否存在某个元素，返回下标" class="headerlink" title="6. indexOf() 查找数组是否存在某个元素，返回下标"></a>6. indexOf() 查找数组是否存在某个元素，返回下标</h4><p>定义：返回在数组中可以找到一个给定元素的第一个索引，如果不存在，则返回-1。<br>语法：array.indexOf(searchElement,fromIndex)<br>参数:<br>searchElement：必需。被查找的元素。<br>fromIndex：可选。开始查找的位置(不能大于等于数组的长度，返回-1)，接受负值，默认值为0。<br>严格相等的搜索：<br>数组的indexOf搜索跟字符串的indexOf不一样,数组的indexOf使用严格相等&#x3D;&#x3D;&#x3D;搜索元素，即数组元素要完全匹配才能搜索成功。<br>注意：indexOf()不能识别NaN。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;啦啦&#x27;</span>,<span class="hljs-number">2</span>,<span class="hljs-number">4</span>,<span class="hljs-number">24</span>,<span class="hljs-title class_">NaN</span>]<br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;啦&#x27;</span>));  <span class="hljs-comment">// -1 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;NaN&#x27;</span>));  <span class="hljs-comment">// -1 </span><br><span class="hljs-variable language_">console</span>.<span class="hljs-title function_">log</span>(a.<span class="hljs-title function_">indexOf</span>(<span class="hljs-string">&#x27;啦啦&#x27;</span>)); <span class="hljs-comment">// 0</span><br></code></pre></td></tr></table></figure><h4 id="7-lastIndexOf-查找指定元素在数组中的最后一个位置"><a href="#7-lastIndexOf-查找指定元素在数组中的最后一个位置" class="headerlink" title="7. lastIndexOf() 查找指定元素在数组中的最后一个位置"></a>7. lastIndexOf() 查找指定元素在数组中的最后一个位置</h4><p>定义：方法返回指定元素,在数组中的最后一个的索引，如果不存在则返回 -1。（从数组后面往前查找）<br>语法：arr.lastIndexOf(searchElement,fromIndex)<br>参数：<br>searchElement：必需。被查找的元素。<br>fromIndex：可选。逆向查找开始位置，默认值数组的长度-1，即查找整个数组。<br>关于fromIndex有三个规则:<br>正值。如果该值大于或等于数组的长度，则整个数组会被查找。<br>负值。将其视为从数组末尾向前的偏移。(比如-2，从数组最后第二个元素开始往前查找)<br>负值。其绝对值大于数组长度，则方法返回 -1，即数组不会被查找。</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a= [<span class="hljs-string">&#x27;OB&#x27;</span>,<span class="hljs-number">4</span>,<span class="hljs-string">&#x27;Koro1&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-number">2</span>,<span class="hljs-string">&#x27;Koro1&#x27;</span>,<span class="hljs-number">3</span>,<span class="hljs-number">4</span>,<span class="hljs-number">5</span>,<span class="hljs-string">&#x27;Koro1&#x27;</span>]; <span class="hljs-comment">// 数组长度为10</span><br><span class="hljs-comment">// let b = a.lastIndexOf(&#x27;Koro1&#x27;,4); // 从下标4开始往前找 返回下标2</span><br><span class="hljs-comment">// let b = a.lastIndexOf(&#x27;Koro1&#x27;,100); //  大于或数组的长度 查找整个数组 返回9</span><br><span class="hljs-comment">// let b = a.lastIndexOf(&#x27;Koro1&#x27;,-11); // -1 数组不会被查找</span><br><span class="hljs-keyword">let</span> b = a.<span class="hljs-title function_">lastIndexOf</span>(<span class="hljs-string">&#x27;Koro1&#x27;</span>,-<span class="hljs-number">9</span>); <span class="hljs-comment">// 从第二个元素4往前查找，没有找到 返回-1</span><br></code></pre></td></tr></table></figure><h4 id="8-ES7-includes-查找数组是否包含某个元素-返回布尔"><a href="#8-ES7-includes-查找数组是否包含某个元素-返回布尔" class="headerlink" title="8. ES7 includes() 查找数组是否包含某个元素 返回布尔"></a>8. ES7 includes() 查找数组是否包含某个元素 返回布尔</h4><p>定义：返回一个布尔值，表示某个数组是否包含给定的值<br>语法：array.includes(searchElement,fromIndex&#x3D;0)<br>参数：<br>searchElement：必需。被查找的元素。<br>fromIndex：可选。默认值为0，参数表示搜索的起始位置，接受负值。正值超过数组长度，数组不会被搜索，返回false。负值绝对值超过长数组度，重置从0开始搜索。<br>includes方法是为了弥补indexOf方法的缺陷而出现的:<br>indexOf方法不能识别NaN<br>indexOf方法检查是否包含某个值不够语义化，需要判断是否不等于-1，表达不够直观</p><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br><span class="line">5</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-keyword">let</span> a = [<span class="hljs-string">&#x27;OB&#x27;</span>,<span class="hljs-string">&#x27;Koro1&#x27;</span>,<span class="hljs-number">1</span>,<span class="hljs-title class_">NaN</span>];<br><span class="hljs-comment">// let b = a.includes(NaN); // true 识别NaN</span><br><span class="hljs-comment">// let b = a.includes(&#x27;Koro1&#x27;,100); // false 超过数组长度 不搜索</span><br><span class="hljs-comment">// let b = a.includes(&#x27;Koro1&#x27;,-3);  // true 从倒数第三个元素开始搜索 </span><br><span class="hljs-comment">// let b = a.includes(&#x27;Koro1&#x27;,-100);  // true 负值绝对值超过数组长度，搜索整个数组</span><br></code></pre></td></tr></table></figure><h3 id="三、遍历方法-12个"><a href="#三、遍历方法-12个" class="headerlink" title="三、遍历方法(12个):"></a>三、遍历方法(12个):</h3><figure class="highlight javascript"><table><tr><td class="gutter"><pre><span class="line">1</span><br><span class="line">2</span><br><span class="line">3</span><br><span class="line">4</span><br></pre></td><td class="code"><pre><code class="hljs javascript"><span class="hljs-title class_">ES5</span>：<br>forEach、every 、some、 filter、map、reduce、reduceRight、<br><span class="hljs-title class_">ES6</span>：<br>find、findIndex、keys、values、entries<br></code></pre></td></tr></table></figure><h4 id="1-forEach"><a href="#1-forEach" class="headerlink" title="1. forEach"></a>1. forEach</h4><p>定义：按升序为数组中含有效值的每一项执行一次回调函数。<br>语法：array.forEach(function(currentValue, index, arr), thisValue)<br>参数：<br>function：必需。数组中每个元素需要调用的函数。<br>回调函数的参数：1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身。<br>thisValue：可选。当执行回调函数时this绑定对象的值，默认值为undefined。<br>关于forEach()你要知道：<br>无法中途退出循环，只能用return退出本次回调，进行下一次回调。<br>它总是返回 undefined值,即使你return了一个值。</p><h4 id="2-every-检测数组所有元素是否都符合判断条件"><a href="#2-every-检测数组所有元素是否都符合判断条件" class="headerlink" title="2. every 检测数组所有元素是否都符合判断条件"></a>2. every 检测数组所有元素是否都符合判断条件</h4><p>定义：方法用于检测数组所有元素是否都符合函数定义的条件。<br>语法：array.every(function(currentValue, index, arr), thisValue)<br>参数：(这几个方法的参数，语法都类似)<br>function：必需。数组中每个元素需要调用的函数。<br>回调函数的参数：1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身。<br>thisValue：可选。当执行回调函数时this绑定对象的值，默认值为undefined。<br>方法返回值规则：<br>如果数组中检测到有一个元素不满足，则整个表达式返回 false，且剩余的元素不会再进行检测。<br>如果所有元素都满足条件，则返回 true。</p><h4 id="3-some-数组中的是否有满足判断条件的元素"><a href="#3-some-数组中的是否有满足判断条件的元素" class="headerlink" title="3. some 数组中的是否有满足判断条件的元素"></a>3. some 数组中的是否有满足判断条件的元素</h4><p>定义：数组中的是否有满足判断条件的元素。<br>语法：array.some(function(currentValue, index, arr), thisValue)<br>参数：(这几个方法的参数，语法都类似)<br>function：必需。数组中每个元素需要调用的函数。<br>回调函数的参数：1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身。<br>thisValue：可选。当执行回调函数时this绑定对象的值，默认值为undefined。<br>方法返回值规则：<br>如果有一个元素满足条件，则表达式返回true, 剩余的元素不会再执行检测。<br>如果没有满足条件的元素，则返回false。</p><h4 id="4-filter-过滤原始数组，返回新数组"><a href="#4-filter-过滤原始数组，返回新数组" class="headerlink" title="4. filter 过滤原始数组，返回新数组"></a>4. filter 过滤原始数组，返回新数组</h4><p>定义: 返回一个新数组, 其包含通过所提供函数实现的测试的所有元素。<br>语法：let new_array &#x3D; arr.filter(function(currentValue, index, arr), thisArg)<br>参数：(这几个方法的参数，语法都类似)<br>function：必需。数组中每个元素需要调用的函数。<br>回调函数的参数：1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身。<br>thisValue：可选。当执行回调函数时this绑定对象的值，默认值为undefined。</p><h4 id="5-map-对数组中的每个元素进行处理，返回新的数组"><a href="#5-map-对数组中的每个元素进行处理，返回新的数组" class="headerlink" title="5. map 对数组中的每个元素进行处理，返回新的数组"></a>5. map 对数组中的每个元素进行处理，返回新的数组</h4><p>定义：创建一个新数组，其结果是该数组中的每个元素都调用一个提供的函数后返回的结果。<br>语法：let new_array &#x3D; arr.map(function(currentValue, index, arr), thisArg)<br>参数：(这几个方法的参数，语法都类似)<br>function：必需。数组中每个元素需要调用的函数。<br>回调函数的参数：1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身。<br>thisValue：可选。当执行回调函数时this绑定对象的值，默认值为undefined。</p><h4 id="6-reduce-为数组提供累加器，合并为一个值"><a href="#6-reduce-为数组提供累加器，合并为一个值" class="headerlink" title="6. reduce 为数组提供累加器，合并为一个值"></a>6. reduce 为数组提供累加器，合并为一个值</h4><p>定义：reduce() 方法对累加器和数组中的每个元素（从左到右）应用一个函数，最终合并为一个值。<br>语法：array.reduce(function(total, currentValue, currentIndex, arr), initialValue)<br>参数：(这几个方法的参数，语法都类似)<br>function：必需。数组中每个元素需要调用的函数。<br>回调函数的参数     1. total(必须)，初始值, 或者上一次调用回调返回的值 2. currentValue(必须),数组当前元素的值 3. index(可选), 当前元素的索引值 4. arr(可选),数组对象本身。<br>initialValue：可选。指定第一次回调 的第一个参数。<br>回调第一次执行时:<br>◉ 如果 initialValue 在调用 reduce 时被提供，那么第一个 total 将等于 initialValue，此时 currentValue 等于数组中的第一个值；<br>◉ 如果 initialValue 未被提供，那么 total 等于数组中的第一个值，currentValue 等于数组中的第二个值。此时如果数组为空，那么将抛出 TypeError。<br>◉ 如果数组仅有一个元素，并且没有提供 initialValue，或提供了 initialValue 但数组为空，那么回调不会被执行，数组的唯一值将被返回。</p><h4 id="7-reduceRight-从右至左累加"><a href="#7-reduceRight-从右至左累加" class="headerlink" title="7. reduceRight 从右至左累加"></a>7. reduceRight 从右至左累加</h4><p>这个方法除了与reduce执行方向相反外，其他完全与其一致，请参考上述 reduce 方法介绍。</p><h4 id="8-9-find-amp-findIndex-根据条件找到数组成员"><a href="#8-9-find-amp-findIndex-根据条件找到数组成员" class="headerlink" title="8~9. find()&amp; findIndex() 根据条件找到数组成员"></a>8~9. find()&amp; findIndex() 根据条件找到数组成员</h4><p>find()定义：用于找出第一个符合条件的数组成员，并返回该成员，如果没有符合条件的成员，则返回undefined。<br>findIndex()定义：返回第一个符合条件的数组成员的位置，如果所有成员都不符合条件，则返回-1。<br>语法：<br>let new_array &#x3D; arr.find(function(currentValue, index, arr), thisArg)<br>let new_array &#x3D; arr.findIndex(function(currentValue, index, arr), thisArg)<br>参数：(这几个方法的参数，语法都类似)<br>function：必需。数组中每个元素需要调用的函数。<br>回调函数的参数：1. currentValue(必须),数组当前元素的值 2. index(可选), 当前元素的索引值 3. arr(可选),数组对象本身。<br>thisValue：可选。当执行回调函数时this绑定对象的值，默认值为undefined。<br>这两个方法都可以识别NaN,弥补了indexOf的不足。</p><h4 id="10-12-keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值"><a href="#10-12-keys-amp-values-amp-entries-遍历键名、遍历键值、遍历键名-键值" class="headerlink" title="10~12. keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值"></a>10~12. keys()&amp;values()&amp;entries() 遍历键名、遍历键值、遍历键名+键值</h4><p>定义：三个方法都返回一个新的 Array Iterator 对象，对象根据方法不同包含不同的值。<br>语法：array.keys()     array.values()     array.entries()<br>参数：无。</p>]]></content>
    
    
    <categories>
      
      <category>web前端</category>
      
    </categories>
    
    
    <tags>
      
      <tag>JavaScript</tag>
      
      <tag>Arr</tag>
      
    </tags>
    
  </entry>
  
  
  
  <entry>
    <title>Hello World</title>
    <link href="/2022/02/17/hello-world/"/>
    <url>/2022/02/17/hello-world/</url>
    
    <content type="html"><![CDATA[<p>Welcome to <a href="https://hexo.io/">Hexo</a>! This is your very first post. Check <a href="https://hexo.io/docs/">documentation</a> for more info. If you get any problems when using Hexo, you can find the answer in <a href="https://hexo.io/docs/troubleshooting.html">troubleshooting</a> or you can ask me on <a href="https://github.com/hexojs/hexo/issues">GitHub</a>.</p><h2 id="Quick-Start"><a href="#Quick-Start" class="headerlink" title="Quick Start"></a>Quick Start</h2><h3 id="Create-a-new-post"><a href="#Create-a-new-post" class="headerlink" title="Create a new post"></a>Create a new post</h3><figure class="highlight bash"><table><tr><td class="gutter"><div class="code-wrapper"><pre><span class="line">1</span><br></pre></div></td><td class="code"><pre><code class="hljs bash">$ hexo new <span class="hljs-string">&quot;My New Post&quot;</span><br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/writing.html">Writing</a></p><h3 id="Run-server"><a href="#Run-server" class="headerlink" title="Run server"></a>Run server</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo server<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/server.html">Server</a></p><h3 id="Generate-static-files"><a href="#Generate-static-files" class="headerlink" title="Generate static files"></a>Generate static files</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo generate<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/generating.html">Generating</a></p><h3 id="Deploy-to-remote-sites"><a href="#Deploy-to-remote-sites" class="headerlink" title="Deploy to remote sites"></a>Deploy to remote sites</h3><figure class="highlight bash"><table><tr><td class="gutter"><pre><span class="line">1</span><br></pre></td><td class="code"><pre><code class="hljs bash">$ hexo deploy<br></code></pre></td></tr></table></figure><p>More info: <a href="https://hexo.io/docs/one-command-deployment.html">Deployment</a></p>]]></content>
    
    
    
  </entry>
  
  
  
  
</search>
